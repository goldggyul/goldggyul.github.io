{"componentChunkName":"component---src-templates-blog-template-js","path":"/java-001/","result":{"data":{"cur":{"id":"f7afaeeb-2c67-510f-a380-ee623277fcd7","html":"<h2 id=\"code-classlanguage-textbuildgradlecode을-설정해보자\" style=\"position:relative;\"><a href=\"#code-classlanguage-textbuildgradlecode%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"code classlanguage textbuildgradlecode을 설정해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">build.gradle</code>을 설정해보자</h2>\n<ul>\n<li>실행 시 cp 지정해주거나 MANIFEST 파일 작성하거나.. 다 뭔가 잘못했는 지 안되다가 아래 방법으로 됐다!</li>\n</ul>\n<h3 id=\"1-main-class-지정\" style=\"position:relative;\"><a href=\"#1-main-class-%EC%A7%80%EC%A0%95\" aria-label=\"1 main class 지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Main Class 지정</h3>\n<ul>\n<li>우선 라이브러리 경로를 추가하기 전에 Main Class를 지정했는 지 확인해보자. 지정해주지 않으면 Main을 못찾는 에러가 날 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">jar <span class=\"token punctuation\">{</span>\n    manifest <span class=\"token punctuation\">{</span>\n        attributes <span class=\"token string\">'Main-Class'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'your.package.Main'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-라이브러리-경로를-추가\" style=\"position:relative;\"><a href=\"#2-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EA%B2%BD%EB%A1%9C%EB%A5%BC-%EC%B6%94%EA%B0%80\" aria-label=\"2 라이브러리 경로를 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 라이브러리 경로를 추가</h3>\n<ul>\n<li>만약 라이브러리 파일들이 있는 경로가 <code class=\"language-text\">libs</code> 폴더라고 해보자. 그러면 아래와 같이 추가하면 된다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">dependencies <span class=\"token punctuation\">{</span>\n    implementation <span class=\"token function\">fileTree</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">:</span> <span class=\"token string\">'jar'</span><span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*.jar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">implementation</code>외에도 다양한 설정이 있다. 자세한 내용은 <a href=\"https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_separation\">gradle docs</a> 참고</li>\n</ul>\n<h3 id=\"3-runtime-class-path-지정\" style=\"position:relative;\"><a href=\"#3-runtime-class-path-%EC%A7%80%EC%A0%95\" aria-label=\"3 runtime class path 지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. runtime class path 지정</h3>\n<ul>\n<li>2번까지만 진행하면 <code class=\"language-text\">./gradlew build</code>로 빌드는 되지만, 그 후 <code class=\"language-text\">java -jar {jar파일}</code>로 실행 시에 라이브러리의 클래스들을 읽지 못하는 문제가 발생한다. 따라서 class path가 이상한 것 같아서 해당 내용으로 찾다 보니 아래와 같이 추가하면 됐다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">jar <span class=\"token punctuation\">{</span>\n    duplicatesStrategy <span class=\"token operator\">=</span> DuplicatesStrategy<span class=\"token punctuation\">.</span>EXCLUDE\n    from <span class=\"token punctuation\">{</span>\n        configurations<span class=\"token punctuation\">.</span>runtimeClasspath<span class=\"token punctuation\">.</span>collect <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> it <span class=\"token punctuation\">:</span> <span class=\"token function\">zipTree</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>이 때 원래는 <code class=\"language-text\">runtimeClasspath</code>만 지정해주면 되는 것 같은데.. 나는 <code class=\"language-text\">Entry {filename} is a duplicate but no duplicate handling strategy has been set.</code> 오류가 발생했고, <code class=\"language-text\">duplicatesStrategy</code>부분을 추가했더니 해결됐다.</li>\n</ul>\n<h3 id=\"4-실행해보자\" style=\"position:relative;\"><a href=\"#4-%EC%8B%A4%ED%96%89%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"4 실행해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 실행해보자!</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">./gradlew clean build\n<span class=\"token function\">java</span> <span class=\"token parameter variable\">-jar</span> build/libs/your.jar</code></pre></div>\n<ul>\n<li>야호~!</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#buildgradle%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%B4%EB%B3%B4%EC%9E%90\"><code class=\"language-text\">build.gradle</code>을 설정해보자</a></p>\n<ul>\n<li><a href=\"#1-main-class-%EC%A7%80%EC%A0%95\">1. Main Class 지정</a></li>\n<li><a href=\"#2-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EA%B2%BD%EB%A1%9C%EB%A5%BC-%EC%B6%94%EA%B0%80\">2. 라이브러리 경로를 추가</a></li>\n<li><a href=\"#3-runtime-class-path-%EC%A7%80%EC%A0%95\">3. runtime class path 지정</a></li>\n<li><a href=\"#4-%EC%8B%A4%ED%96%89%ED%95%B4%EB%B3%B4%EC%9E%90\">4. 실행해보자!</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"을 설정해보자 실행 시 cp 지정해주거나 MANIFEST 파일 작성하거나.. 다 뭔가 잘못했는 지 안되다가 아래 방법으로 됐다! 1. Main Class 지정 우선 라이브러리 경로를 추가하기 전에 Main Class를 지정했는 지 확인해보자. 지정해주지 않으면 Main을 못찾는 에러가 날 수 있다. 2. 라이브러리 경로를 추가 만약 라이브러리 파일들이 있는 경로가  폴더라고 해보자. 그러면 아래와 같이 추가하면 된다 외에도 다양한 설정이 있다. 자세한 내용은 gradle docs 참고 3. runtime class path 지정 2번까지만 진행하면 로 빌드는 되지만, 그 후 로 실행 시에 라이브러리의 클래스들을 읽지 못하는 문제가 발생한다. 따라서 class path가 이상한 것 같아서 해당 내용으로 찾다 보니 아래와 같이 추가하면 됐다. 이 때 원래는 만 지정해주면 되는 것 같은데.. 나는  오류가 발생했고, 부분을 추가했더니 해결됐다. 4. 실행해보자! 야호~! 을 설정해보자 …","frontmatter":{"date":"June 19, 2022","title":"gradle로 빌드 & 실행 시에 라이브러리(jar파일) 포함하기","categories":"Java","author":"goldggyul","emoji":"🐘"},"fields":{"slug":"/java-001/"}},"next":null,"prev":{"id":"842faac4-9ac9-5a02-b302-f7a95068fc8b","html":"<h1 id=\"synchronous-vs-non-blocking\" style=\"position:relative;\"><a href=\"#synchronous-vs-non-blocking\" aria-label=\"synchronous vs non blocking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Synchronous vs. Non-blocking?</h1>\n<ul>\n<li>교수님께서 Synchronous의 반대가 Nonblocking처럼 설명하셨는데 둘은 반대라기보다는 다른 느낌으로 알고 있어서 한 번 찾아봤다.</li>\n<li><a href=\"https://velog.io/@wonhee010/%EB%8F%99%EA%B8%B0vs%EB%B9%84%EB%8F%99%EA%B8%B0-feat.-blocking-vs-non-blocking\">동기 vs 비동기 (feat. blocking vs non-blocking)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=IdpkfygWIMk\">[10분 테코톡] 🎧 우의 Block vs Non-Block &#x26; Sync vs Async</a></li>\n</ul>\n<h2 id=\"blocking-vs-non-blocking\" style=\"position:relative;\"><a href=\"#blocking-vs-non-blocking\" aria-label=\"blocking vs non blocking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Blocking vs. Non-blocking</h2>\n<ul>\n<li><code class=\"language-text\">제어권</code> 에 초점을 둔다.</li>\n<li>예를 들어 함수 A에서 함수 B를 call했을 때</li>\n<li><strong>Blocking</strong>: B는 할 일을 다 마쳐야 A에게 제어권을 준다.</li>\n<li><strong>Non-blocking</strong>: B는 할 일을 마치지 않았어도 A에게 제어권을 넘겨준다.</li>\n<li>따라서 Blocking이라면 A는 다른 일을 못하고 대기해야 한다.</li>\n</ul>\n<h2 id=\"synchronous-vs-asynchronous\" style=\"position:relative;\"><a href=\"#synchronous-vs-asynchronous\" aria-label=\"synchronous vs asynchronous permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Synchronous vs. Asynchronous</h2>\n<ul>\n<li><code class=\"language-text\">요청의 결과</code>를 처리하는 쪽에 초점을 둔다.</li>\n<li>예를 들어 함수 A에서 함수 B를 call했을 때</li>\n<li><strong>Synchronous</strong>: A는 함수 B가 완료 했는 지를 계속 체크한다.</li>\n<li><strong>Asynchronous</strong>: B에서 스스로 완료 여부를 처리한다. (Callback)</li>\n</ul>\n<h1 id=\"python-기본-문법들\" style=\"position:relative;\"><a href=\"#python-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95%EB%93%A4\" aria-label=\"python 기본 문법들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python 기본 문법들</h1>\n<ul>\n<li>파이썬으로 코테 처음 준비해서 기본 문법들 정리</li>\n</ul>\n<h1 id=\"naming-convention\" style=\"position:relative;\"><a href=\"#naming-convention\" aria-label=\"naming convention permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Naming convention</h1>\n<ul>\n<li>소문자 l, 대문자 O, 대문자 I는 단일 문자 변수명으로 쓰지 않기</li>\n<li>클래스는 CamelCase</li>\n<li>함수는 snake_case</li>\n</ul>\n<h2 id=\"1-입력-받기\" style=\"position:relative;\"><a href=\"#1-%EC%9E%85%EB%A0%A5-%EB%B0%9B%EA%B8%B0\" aria-label=\"1 입력 받기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 입력 받기</h2>\n<ul>\n<li>\n<p>숫자 입력받기</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>띄어쓰기로 구분된 <strong>문자</strong> 입력받기</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">arr <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>띄어쓰기로 구분된 <strong>숫자</strong> 입력받기</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">arr <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>띄어쓰기가 아닌 엔터로 구분된 <strong>문자</strong>일 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 총 리스트 길이</span>\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  arr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 숫자일 경우 int(input())</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"2-반복문\" style=\"position:relative;\"><a href=\"#2-%EB%B0%98%EB%B3%B5%EB%AC%B8\" aria-label=\"2 반복문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 반복문</h2>\n<ul>\n<li>\n<p>for</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> </code></pre></div>\n<ul>\n<li>0부터 n-1까지 반복된다.</li>\n<li>주의할 건 for문 안에서 index 변경은 불가능하다. 반복문 내에서 i를 바꿔봤자 다시 돌면 i가 원래 반복문 숫자대로 리셋된다… 이거 때문에 삽질했다.</li>\n<li>그래서 반복문 내에서 i를 바꿔야될 경우엔 while을 쓰자.</li>\n</ul>\n</li>\n<li>\n<p>while</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># ...</span>\n  i<span class=\"token operator\">+=</span><span class=\"token number\">1</span></code></pre></div>\n<ul>\n<li>while일 때는 i를 변경해도 문제 없이(C++처럼) 변경된다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-문자\" style=\"position:relative;\"><a href=\"#3-%EB%AC%B8%EC%9E%90\" aria-label=\"3 문자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 문자</h2>\n<h3 id=\"문자-️-아스키코드\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90-%EF%B8%8F-%EC%95%84%EC%8A%A4%ED%82%A4%EC%BD%94%EB%93%9C\" aria-label=\"문자 ️ 아스키코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자 ↔️ 아스키코드</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">ord()</code>: 문자에서 아스키코드로</p>\n<ul>\n<li>예를 들어 알파벳으로 비트마스킹할 경우</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">mask <span class=\"token operator\">|</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">chr()</code>: 아스키코드에서 문자로</p>\n</li>\n</ul>\n<h3 id=\"문자-vs-숫자\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90-vs-%EC%88%AB%EC%9E%90\" aria-label=\"문자 vs 숫자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자 vs. 숫자</h3>\n<ul>\n<li>\n<p>문자인지 숫자인지 판단하기</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">word<span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># word에 공백, 기호, 숫자가 있을 때 False -> 문자 판단</span>\nword<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># word에 공백, 기호, 문자가 있을 때 False -> 숫자 판단</span>\nword<span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># word에 공백, 기호가 있을 때 False -> 문자, 숫자 판단</span></code></pre></div>\n</li>\n<li>\n<p>문자인 경우 한글과 영어 비교해야할 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">word<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isalpha<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 한글이면 False</span></code></pre></div>\n</li>\n<li>\n<p>영어만 있는 단어인지 확인하기</p>\n<ul>\n<li>\n<p>정규식 활용</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\nword <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\nreg <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'[a-zA-Z]'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> reg<span class=\"token punctuation\">.</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># 영어로만 이루어진 단어</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">lower()</code>와 <code class=\"language-text\">upper()</code> 이용하기</p>\n<ul>\n<li>\n<p><code class=\"language-text\">word.lower()</code>는 영어를 모두 소문자로 변경하고, <code class=\"language-text\">word.upper()</code>는 영어를 모두 대문자로 변경한다.</p>\n</li>\n<li>\n<p>그렇다면 영어가 없는 단어라면 <code class=\"language-text\">lower()</code>한 결과와 <code class=\"language-text\">upper()</code>한 결과는 <strong>같을 것이다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">word <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n<span class=\"token keyword\">if</span> word<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> word<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 영어임!</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 영어 없음</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://codethief.io/ko/%ED%8C%8C%EC%9D%B4%EC%8D%ACpython%EC%97%90%EC%84%9C-%EB%8B%A8%EC%96%B4%EA%B0%80-%EC%98%81%EC%96%B4%EC%9D%B8%EC%A7%80-%EC%95%84%EB%8B%8C%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0/\">참고</a></p>\n</li>\n<li>\n<p>문자열 정수 변환</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">dig <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"자료형-크기\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%A3%8C%ED%98%95-%ED%81%AC%EA%B8%B0\" aria-label=\"자료형 크기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료형 크기?</h3>\n<ul>\n<li>Python 3에서는 long 타입이 없어지고 int 타입만 남았다.</li>\n<li>이 때 int는 arbitrary precision을 지원한다.</li>\n<li>즉, 사용할 수 잇는 메모리양이 정해진 fixed-precision과 달리, 특정 값을 나타날 때 바이트가 부족하다면 유동적으로 늘리면서 메모리 크기를 변경하는 것이다.</li>\n<li>그래서 int가 C++처럼 4바이트값만 담을 수 있는 것이 아니고 long, 또는 더 큰 수도 담을 수 있다.</li>\n<li><a href=\"https://ahracho.github.io/posts/python/2017-05-09-python-integer-overflow/\">참고</a></li>\n</ul>\n<h1 id=\"문자열-자르기slicing\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%9E%90%EB%A5%B4%EA%B8%B0slicing\" aria-label=\"문자열 자르기slicing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열 자르기(Slicing)</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">result <span class=\"token operator\">=</span> word<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span>end<span class=\"token punctuation\">]</span> <span class=\"token comment\"># start~end-1까지</span></code></pre></div>\n<ul>\n<li>start가 0일 경우는 생략 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">result <span class=\"token operator\">=</span> word<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">:</span>start<span class=\"token operator\">+</span>count<span class=\"token punctuation\">]</span> <span class=\"token comment\"># start에서부터 count개</span>\nresult <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>num<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 마지막 -num 번째부터(포함) 마지막까지</span></code></pre></div>\n<h1 id=\"정렬\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A0%AC\" aria-label=\"정렬 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정렬</h1>\n<h2 id=\"비교자-cmp\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EA%B5%90%EC%9E%90-cmp\" aria-label=\"비교자 cmp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비교자 cmp</h2>\n<ul>\n<li>\n<p>C++에서 operator&#x3C; 연산자 오버로딩하던 것처럼, 파이썬에서도 맘대로 정렬해보자</p>\n</li>\n<li>\n<p>인자가 두 개 들어오는 함수를 만들자</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> 어쩌구<span class=\"token punctuation\">:</span> <span class=\"token comment\"># y가 앞으로 와야한다면 </span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">elif</span> 저쩌구<span class=\"token punctuation\">:</span> <span class=\"token comment\"># x가 앞으로 와야한다면</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token comment\"># 같다</span></code></pre></div>\n</li>\n<li>\n<p>정렬해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">arr<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token builtin\">cmp</span><span class=\"token operator\">=</span>compare<span class=\"token punctuation\">)</span>\nresult <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token builtin\">cmp</span><span class=\"token operator\">=</span>compare<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"python3\" style=\"position:relative;\"><a href=\"#python3\" aria-label=\"python3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python3</h3>\n<ul>\n<li>\n<p>하지만 위 처럼 cmp에 넣을 수 있는 건 Python2다. Python3부턴 cmp가 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> cmp_to_key\nresult <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>cmp_to_key<span class=\"token punctuation\">(</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>cmp_to_key를 import해서 cmp를 key로 바꿔줘야한다.</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://velog.io/@sparkbosing/python-%EB%82%B4-%EB%A7%88%EC%9D%8C%EB%8C%80%EB%A1%9C-%EC%A0%95%EB%A0%ACsort\">참고</a></p>\n</li>\n</ul>\n<h2 id=\"key-함수-넣어서-정렬하기\" style=\"position:relative;\"><a href=\"#key-%ED%95%A8%EC%88%98-%EB%84%A3%EC%96%B4%EC%84%9C-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0\" aria-label=\"key 함수 넣어서 정렬하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key 함수 넣어서 정렬하기</h2>\n<ul>\n<li>\n<p>key를 기준으로 정렬할 수 있다.</p>\n</li>\n<li>\n<p>즉, 리스트에서 앞 원소부터 비교하면서 정렬한다면</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">li <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nli<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 오름차순 </span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [[0, 1], [0, 4], [1, 2]]</span>\nli<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 내림차순</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span> <span class=\"token comment\"># [[1, 2], [0, 4], [0, 1]]</span>\nli<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 0번째 원소 기준 오름차순, 동일하다면 1번째 원소 기준 내림차순 정렬</span></code></pre></div>\n</li>\n<li>\n<p>reverse하고 싶다면 <code class=\"language-text\">reverse=True</code> 옵션을 줘도 된다</p>\n</li>\n<li>\n<p>딕셔너리 역시 정렬할 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">dict</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\nsdict <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\"># 기본은 key값 기준 정렬</span>\n<span class=\"token comment\"># [('A', 1), ('B', 2), ('C', 3), ('D', 4)]</span>\nsdict <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [('A', 1), ('B', 2), ('C', 3), ('D', 4)]</span></code></pre></div>\n</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#blocking-vs-non-blocking\">Blocking vs. Non-blocking</a></p>\n</li>\n<li>\n<p><a href=\"#synchronous-vs-asynchronous\">Synchronous vs. Asynchronous</a></p>\n</li>\n<li>\n<p><a href=\"#1-%EC%9E%85%EB%A0%A5-%EB%B0%9B%EA%B8%B0\">1. 입력 받기</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EB%B0%98%EB%B3%B5%EB%AC%B8\">2. 반복문</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EB%AC%B8%EC%9E%90\">3. 문자</a></p>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%9E%90-%EF%B8%8F-%EC%95%84%EC%8A%A4%ED%82%A4%EC%BD%94%EB%93%9C\">문자 ↔️ 아스키코드</a></li>\n<li><a href=\"#%EB%AC%B8%EC%9E%90-vs-%EC%88%AB%EC%9E%90\">문자 vs. 숫자</a></li>\n<li><a href=\"#%EC%9E%90%EB%A3%8C%ED%98%95-%ED%81%AC%EA%B8%B0\">자료형 크기?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B9%84%EA%B5%90%EC%9E%90-cmp\">비교자 cmp</a></p>\n<ul>\n<li><a href=\"#python3\">Python3</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#key-%ED%95%A8%EC%88%98-%EB%84%A3%EC%96%B4%EC%84%9C-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0\">Key 함수 넣어서 정렬하기</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 08, 2022","title":"Synchronous vs. Non-blocking? / 파이썬 기본 문법 정리 | TIL ＃1","categories":"TIL Python","author":"goldggyul","emoji":"🍊"},"fields":{"slug":"/til-001/"}},"site":{"siteMetadata":{"siteUrl":"https://goldggyul.github.io","comments":{"utterances":{"repo":"goldggyul/goldggyul.github.io"}}}}},"pageContext":{"slug":"/java-001/","nextSlug":"","prevSlug":"/til-001/"}},"staticQueryHashes":["1956554647","2938748437","3454833782"]}