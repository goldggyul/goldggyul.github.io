{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"078fdb1d-c8cf-5589-bdb7-91e943be0bb2","excerpt":"프로세스와 스레드 프로세스의 개요 프로세스 제어 블록과 문맥 교환 프로세스의 연산 스레드 [심화학습] 동적 할당 영역과 시스템 호출 PCB: Process Control Block 📌 프로세스 제어 블록 프로세스의 개요에서 프로세스를 실행하는 데 메모리만 필요한 것이 아니고, 관리하기 위한 자료 구조로 PCB가 필요하다고 했죠? PCB에 대해 더 알아봅시다. 프로세스를  Task라고도 하는 것처럼, PCB 역시 TCB라고도 부릅니다. ☘️ PCB 구성 포인터 프로세스의 개요에서 프로세스의 상태에 따라 큐로 운영된다고 했습니다. 이 때 queue에서 PCB를 연결할 때 포인터를 사용합니다. 프로세스 상태 Run, Ready, Waiting 등의 상태 프로세스 ID 프로세스를 구별하기 위한 구분자 프로그램 우선순위 CPU Scheduling이 일어나서 스케줄러가 준비 상태에 있는 프로세스 중 실행 상태로 옮겨야 할 프로세스를 어떻게 선택할까요? 프로세스 우선순위를 기준으로 삼아서, 높은…","frontmatter":{"categories":"운영체제","title":"프로세스 제어 블록과 문맥 교환 | PCB & Context Switching","date":"September 12, 2022"},"fields":{"slug":"/os-002-pcb/"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#pcb-process-control-block\">PCB: Process Control Block</a></p>\n<ul>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4-%EB%B8%94%EB%A1%9D\">📌 프로세스 제어 블록</a></p>\n<ul>\n<li><a href=\"#%EF%B8%8F-pcb-%EA%B5%AC%EC%84%B1\">☘️ PCB 구성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-context-switching\">📌 Context Switching</a></p>\n<ul>\n<li><a href=\"#%EF%B8%8F-context-switching%EB%AC%B8%EB%A7%A5-%EA%B5%90%ED%99%98%EC%9D%B4%EB%9E%80\">☘️ Context Switching(문맥 교환)이란</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%96%B8%EC%A0%9C-%EC%9D%BC%EC%96%B4%EB%82%A0%EA%B9%8C\">☘️ 언제 일어날까?</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%A0%88%EC%B0%A8\">☘️ 절차</a></li>\n<li><a href=\"#%EF%B8%8F--%EB%8B%A8%EC%A0%90\">☘️  단점</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"}},{"node":{"id":"b621840d-1d30-5bb3-901f-5542d02679d7","excerpt":"프로세스와 스레드 프로세스의 개요 프로세스 제어 블록과 문맥 교환 프로세스의 연산 스레드 [심화학습] 동적 할당 영역과 시스템 호출 프로세스의 개요 📌 프로그램과 프로세스 운영체제에서 는 하나의 작업단위입니다. (그래서 프로세스를 라고도 부릅니다.) 사용자가 마우스를 더블클릭하여 을 실행하면 그 프로그램이 프로세스가 되는 겁니다. 그럼 정확히 둘의 차이는 뭘까요? 정적인 상태 vs. 동적인 상태 프로그램은 저장장치에 보관되어 있습니다. 그리고 프로그램이 실행된다는 건 프로그램 코드가 에 올라와서 작업이 진행되는 것입니다. 그리고 이렇게 메모리에 올라온 것이 프로세스라고 할 수 있습니다. 프로그램은 작업 절차를 쭉 적어놓은 것이고, 프로세스는 그 작성된 작업 절차를 실제로 실행하는 것입니다. 예를 들자면, 요리할 때 레시피를 보고 레시피를 순서대로 실행하면서 요리를 하는 것과 같습니다. 이 때 레시피가 프로그램이고, 요리를 하는 것은 프로세스가 명령을 실행하는 것이라고 할 수 있습니…","frontmatter":{"categories":"운영체제","title":"프로세스의 개요 | 프로세스와 스레드","date":"September 11, 2022"},"fields":{"slug":"/os-001-process/"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EA%B0%9C%EC%9A%94\">프로세스의 개요</a></p>\n<ul>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B3%BC-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\">📌 프로그램과 프로세스</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%97%90%EC%84%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EB%A1%9C\">📌 프로그램에서 프로세스로</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C\">📌 프로세스의 상태</a></p>\n<ul>\n<li><a href=\"#-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C-%EC%A2%85%EB%A5%98\">🏃 프로세스의 상태 종류</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"}},{"node":{"id":"864987d1-cbbf-599b-849c-d7ce534ddd9f","excerpt":"","frontmatter":{"categories":"TIL Python","title":"파이썬 문법 정리 | TIL ＃3","date":"September 11, 2022"},"fields":{"slug":"/til-003/"},"tableOfContents":""}},{"node":{"id":"59f99dde-796b-5bae-bb72-5009bb50c8bd","excerpt":"파이썬 문법 정리 : 문자열 검색 사용법 찾는 문자가 존재하면 index 반환 없으면 -1 반환 이 때 인덱스는 string의 인덱스를 뜻하는 것 시간 복잡도는 정확하게 나온 걸 찾지 못해서 모르겠지만 C++ 의 경우 string의 길이가  n, substring의 길이가 m이면  이므로 같을 것 같다.  operator 근데 나는 문자열이 있는 지 아닌지를 찾으려고 find를 썼는데, 파이썬 docs를 보니까 substring의 position을 찾으려고 하는 게 아니면  operator를 쓰라고 한다. (근데 백준에서 봤을 때 시간 차이는 얼마 안난다)  입력받기 엔터로 구분된 입력 받기 파이썬에서 언더스코어의 의미는 인터프리터에서 마지막 값 저장할 때 don’t care: 값 무시하고 싶을 때 특별한 의미의 네이밍을 할 때 예를 들어 클래스의 private 변수들에 맨 앞에 붙여서 사용 단 진정한 private를 지원하진 않으므로 직접 가져다 쓰면 가능 숫자의 자릿수 구분자(…","frontmatter":{"categories":"TIL Python","title":"파이썬 문법 정리 | TIL ＃2","date":"September 09, 2022"},"fields":{"slug":"/til-002/"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%AC%B8%EB%B2%95-%EC%A0%95%EB%A6%AC\">파이썬 문법 정리</a></p>\n<ul>\n<li>\n<p><a href=\"#code-classlanguage-textfindcode-%EB%AC%B8%EC%9E%90%EC%97%B4-%EA%B2%80%EC%83%89\"><code class=\"language-text\">find</code>: 문자열 검색</a></p>\n<ul>\n<li><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\">사용법</a></li>\n<li><a href=\"#code-classlanguage-textincode-operator\"><code class=\"language-text\">in</code> operator</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9E%85%EB%A0%A5%EB%B0%9B%EA%B8%B0\">입력받기</a></p>\n<ul>\n<li><a href=\"#%EC%97%94%ED%84%B0%EB%A1%9C-%EA%B5%AC%EB%B6%84%EB%90%9C-%EC%9E%85%EB%A0%A5-%EB%B0%9B%EA%B8%B0\">엔터로 구분된 입력 받기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9E%85%EB%A0%A5-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EB%B0%9B%EA%B8%B0\">입력 빠르게 받기</a></p>\n<ul>\n<li><a href=\"#code-classlanguage-textsysstdinreadlinecode\"><code class=\"language-text\">sys.stdin.readline()</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"}},{"node":{"id":"842faac4-9ac9-5a02-b302-f7a95068fc8b","excerpt":"Synchronous vs. Non-blocking? 교수님께서 Synchronous의 반대가 Nonblocking처럼 설명하셨는데 둘은 반대라기보다는 다른 느낌으로 알고 있어서 한 번 찾아봤다. 동기 vs 비동기 (feat. blocking vs non-blocking) [10분 테코톡] 🎧 우의 Block vs Non-Block & Sync vs Async Blocking vs. Non-blocking  에 초점을 둔다. 예를 들어 함수 A에서 함수 B를 call했을 때 Blocking: B는 할 일을 다 마쳐야 A에게 제어권을 준다. Non-blocking: B는 할 일을 마치지 않았어도 A에게 제어권을 넘겨준다. 따라서 Blocking이라면 A는 다른 일을 못하고 대기해야 한다. Synchronous vs. Asynchronous 를 처리하는 쪽에 초점을 둔다. 예를 들어 함수 A에서 함수 B를 call했을 때 Synchronous: A는 함수 B가 완료 했는 지를 계속 체…","frontmatter":{"categories":"TIL Python","title":"Synchronous vs. Non-blocking? / 파이썬 기본 문법 정리 | TIL ＃1","date":"September 08, 2022"},"fields":{"slug":"/til-001/"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#synchronous-vs-non-blocking\">Synchronous vs. Non-blocking?</a></p>\n<ul>\n<li><a href=\"#blocking-vs-non-blocking\">Blocking vs. Non-blocking</a></li>\n<li><a href=\"#synchronous-vs-asynchronous\">Synchronous vs. Asynchronous</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#python-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95%EB%93%A4\">Python 기본 문법들</a></p>\n</li>\n<li>\n<p><a href=\"#naming-convention\">Naming convention</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%EC%9E%85%EB%A0%A5-%EB%B0%9B%EA%B8%B0\">1. 입력 받기</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EB%B0%98%EB%B3%B5%EB%AC%B8\">2. 반복문</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EB%AC%B8%EC%9E%90\">3. 문자</a></p>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%9E%90-%EF%B8%8F-%EC%95%84%EC%8A%A4%ED%82%A4%EC%BD%94%EB%93%9C\">문자 ↔️ 아스키코드</a></li>\n<li><a href=\"#%EB%AC%B8%EC%9E%90-vs-%EC%88%AB%EC%9E%90\">문자 vs. 숫자</a></li>\n<li><a href=\"#%EC%9E%90%EB%A3%8C%ED%98%95-%ED%81%AC%EA%B8%B0\">자료형 크기?</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%9E%90%EB%A5%B4%EA%B8%B0slicing\">문자열 자르기(Slicing)</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A0%95%EB%A0%AC\">정렬</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%B9%84%EA%B5%90%EC%9E%90-cmp\">비교자 cmp</a></p>\n<ul>\n<li><a href=\"#python3\">Python3</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#key-%ED%95%A8%EC%88%98-%EB%84%A3%EC%96%B4%EC%84%9C-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0\">Key 함수 넣어서 정렬하기</a></p>\n</li>\n</ul>\n</li>\n</ul>"}},{"node":{"id":"f7afaeeb-2c67-510f-a380-ee623277fcd7","excerpt":"을 설정해보자 실행 시 cp 지정해주거나 MANIFEST 파일 작성하거나.. 다 뭔가 잘못했는 지 안되다가 아래 방법으로 됐다! 1. Main Class 지정 우선 라이브러리 경로를 추가하기 전에 Main Class를 지정했는 지 확인해보자. 지정해주지 않으면 Main을 못찾는 에러가 날 수 있다. 2. 라이브러리 경로를 추가 만약 라이브러리 파일들이 있는 경로가  폴더라고 해보자. 그러면 아래와 같이 추가하면 된다 외에도 다양한 설정이 있다. 자세한 내용은 gradle docs 참고 3. runtime class path 지정 2번까지만 진행하면 로 빌드는 되지만, 그 후 로 실행 시에 라이브러리의 클래스들을 읽지 못하는 문제가 발생한다. 따라서 class path가 이상한 것 같아서 해당 내용으로 찾다 보니 아래와 같이 추가하면 됐다. 이 때 원래는 만 지정해주면 되는 것 같은데.. 나는  오류가 발생했고, 부분을 추가했더니 해결됐다. 4. 실행해보자! 야호~! 을 설정해보자 …","frontmatter":{"categories":"Java","title":"gradle로 빌드 & 실행 시에 라이브러리(jar파일) 포함하기","date":"June 19, 2022"},"fields":{"slug":"/java-001/"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#code-classlanguage-textbuildgradlecode%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%B4%EB%B3%B4%EC%9E%90\"><code class=\"language-text\">build.gradle</code>을 설정해보자</a></p>\n<ul>\n<li><a href=\"#1-main-class-%EC%A7%80%EC%A0%95\">1. Main Class 지정</a></li>\n<li><a href=\"#2-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EA%B2%BD%EB%A1%9C%EB%A5%BC-%EC%B6%94%EA%B0%80\">2. 라이브러리 경로를 추가</a></li>\n<li><a href=\"#3-runtime-class-path-%EC%A7%80%EC%A0%95\">3. runtime class path 지정</a></li>\n<li><a href=\"#4-%EC%8B%A4%ED%96%89%ED%95%B4%EB%B3%B4%EC%9E%90\">4. 실행해보자!</a></li>\n</ul>\n</li>\n</ul>"}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"뀰🍊","bio":{"role":"백엔드 개발자","description":["안녕하세요!","Good morning\n y'all~"],"thumbnail":"moving_ggyul.gif"},"social":{"github":"https://github.com/goldggyul","linkedIn":"","email":"wakegyul@gmail.com"}}}}},"pageContext":{}},"staticQueryHashes":["1956554647","2938748437","3350743975","3454833782"]}