{"componentChunkName":"component---src-templates-blog-template-js","path":"/spring-core-basic-001/","result":{"data":{"cur":{"id":"42417c94-02fb-5eb2-8ed2-501567bbb696","html":"<blockquote>\n<p>본 게시글은 <a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8\">스프링 핵심 원리 - 기본편</a> 강의를 듣고 정리했습니다.</p>\n</blockquote>\n<h1 id=\"️-스프링-핵심-원리\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC\" aria-label=\"️ 스프링 핵심 원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>☘️ 스프링 핵심 원리</h1>\n<p>스프링을 제대로 학습하려면 스프링이 제공하는 기능만 아는 게 아니라 객체지향의 원리와, 그 원리를 스프링이 어떻게 지원하는 지 함께 풀어가면서 이해해야 한다! 이 과정을 이해하고 나면 개발, 설계하는 시야가 달라지고 정말 재밌어진다.</p>\n<p>단순히 스프링 기능을 배우는 건 어렵지 않고, 스프링이 제공하는 핵심 가치와 원리를 제대로 파악하려면 객체 지향을 이해해야 한다. 스프링의 본질을 이해했다는 것은 객체 지향 설계의 본질을 이해하는 것과 같다.</p>\n<h2 id=\"-자바-진영의-추운-겨울과-스프링의-탄생\" style=\"position:relative;\"><a href=\"#-%EC%9E%90%EB%B0%94-%EC%A7%84%EC%98%81%EC%9D%98-%EC%B6%94%EC%9A%B4-%EA%B2%A8%EC%9A%B8%EA%B3%BC-%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%98-%ED%83%84%EC%83%9D\" aria-label=\" 자바 진영의 추운 겨울과 스프링의 탄생 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 자바 진영의 추운 겨울과 스프링의 탄생</h2>\n<p>당시 쓰던 EJB(Enterprise Java Bean)…</p>\n<p>하지만 여기서 불편함을 느끼고 <code class=\"language-text\">스프링</code>과 <code class=\"language-text\">하이버네이트</code> 두 기술이 개발되었다.</p>\n<p>스프링은 EJB 컨테이너, 하이버네이트는 EJB 엔티티빈 기술을 대체하게 되었다. 그리고 하이버네이트를 바탕으로 자바 ORM 표준으로 JPA가 나오게 되었다.</p>\n<p>EJB의 문제점을 지적하고, EJB 없이도 훌륭한 확장 가능한 애플리케이션이 개발할 수 있음을 코드로 보여주던 로드 존슨의 책에서 시작해서 스프링이 개발되게 되었다.</p>\n<p>스프링은 정말 좋지만 세팅이 힘들고, 스프링을 갖고 웹 애플리케이션을 개발하면, 톰캣이라는 웹서버에 앱을 war로 빌드해서 넣고 배포해야 하는데 이것도 복잡하다. 스프링부트에서는 당시 웹서버를 내장해서 편하게 띄우는 것이 유행하고 있어서 그를 받아들이고 설정도 거의 할 게 없도록 발전했다.</p>\n<h2 id=\"-스프링이란\" style=\"position:relative;\"><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%B4%EB%9E%80\" aria-label=\" 스프링이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 스프링이란?</h2>\n<h2 id=\"-좋은-객체-지향-프로그래밍이란\" style=\"position:relative;\"><a href=\"#-%EC%A2%8B%EC%9D%80-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80\" aria-label=\" 좋은 객체 지향 프로그래밍이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 좋은 객체 지향 프로그래밍이란?</h2>\n<h2 id=\"-객체-지향-설계와-스프링\" style=\"position:relative;\"><a href=\"#-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%99%80-%EC%8A%A4%ED%94%84%EB%A7%81\" aria-label=\" 객체 지향 설계와 스프링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📌 객체 지향 설계와 스프링</h2>","excerpt":"본 게시글은 스프링 핵심 원리 - 기본편 강의를 듣고 정리했습니다. ☘️ 스프링 핵심 원리 스프링을 제대로 학습하려면 스프링이 제공하는 기능만 아는 게 아니라 객체지향의 원리와, 그 원리를 스프링이 어떻게 지원하는 지 함께 풀어가면서 이해해야 한다! 이 과정을 이해하고 나면 개발, 설계하는 시야가 달라지고 정말 재밌어진다. 단순히 스프링 기능을 배우는 건 어렵지 않고, 스프링이 제공하는 핵심 가치와 원리를 제대로 파악하려면 객체 지향을 이해해야 한다. 스프링의 본질을 이해했다는 것은 객체 지향 설계의 본질을 이해하는 것과 같다. 📌 자바 진영의 추운 겨울과 스프링의 탄생 당시 쓰던 EJB(Enterprise Java Bean)… 하지만 여기서 불편함을 느끼고 과  두 기술이 개발되었다. 스프링은 EJB 컨테이너, 하이버네이트는 EJB 엔티티빈 기술을 대체하게 되었다. 그리고 하이버네이트를 바탕으로 자바 ORM 표준으로 JPA가 나오게 되었다. EJB의 문제점을 지적하고, EJB 없이…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC\">☘️ 스프링 핵심 원리</a></p>\n<ul>\n<li><a href=\"#-%EC%9E%90%EB%B0%94-%EC%A7%84%EC%98%81%EC%9D%98-%EC%B6%94%EC%9A%B4-%EA%B2%A8%EC%9A%B8%EA%B3%BC-%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%98-%ED%83%84%EC%83%9D\">📌 자바 진영의 추운 겨울과 스프링의 탄생</a></li>\n<li><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%B4%EB%9E%80\">📌 스프링이란?</a></li>\n<li><a href=\"#-%EC%A2%8B%EC%9D%80-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80\">📌 좋은 객체 지향 프로그래밍이란?</a></li>\n<li><a href=\"#-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%99%80-%EC%8A%A4%ED%94%84%EB%A7%81\">📌 객체 지향 설계와 스프링</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"date":"October 06, 2022","title":"객체 지향 설계와 스프링 - 스프링 핵심 원리 기본편 | 매일 1시간 👨🏻‍🏫 6일차","categories":"강의","author":"goldggyul","emoji":null,"imageEmoji":"spring-logo.png"},"fields":{"slug":"/spring-core-basic-001/"}},"next":{"id":"6c392354-c3d4-5333-9a77-ef2d5567b310","html":"<blockquote>\n<p>본 게시글은 <a href=\"http://www.yes24.com/Product/Goods/18249021\">객체지향의 사실과 오해</a> 책을 읽고 작성했습니다.</p>\n</blockquote>\n<h1 id=\"-객체지향의-사실과-오해--역할-책임-협력-관점에서-본-객체지향\" style=\"position:relative;\"><a href=\"#-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98-%EC%82%AC%EC%8B%A4%EA%B3%BC-%EC%98%A4%ED%95%B4--%EC%97%AD%ED%95%A0-%EC%B1%85%EC%9E%84-%ED%98%91%EB%A0%A5-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EB%B3%B8-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5\" aria-label=\" 객체지향의 사실과 오해  역할 책임 협력 관점에서 본 객체지향 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📓 객체지향의 사실과 오해 | 역할, 책임, 협력 관점에서 본 객체지향</h1>\n<blockquote>\n<p>그래서 객체지향이 무엇인가?를 얘기하고자 하는 책인 듯하다.</p>\n<p>저번 학기 객체지향개발방법론 수업을 들으면서, 교수님이 정말 정말 강조했던 내용이 있다.</p>\n<p>객체지향의 핵심은 결국 객체이고, 시스템을 구성하는 오브젝트들의 커뮤니케이션(메세지 패싱, 콜라보레이션)을 통해 시스템이 제공해야할 서비스(시스템 오퍼레이션)을 제공하는 것이 객체지향 시스템이라고 하셨다.</p>\n<p>즉, 객체들 간의 협력을 통해 시스템 오퍼레이션-서비스를 만들어내는 것이 객체지향 시스템이라는 말로 이해했다.</p>\n<p>1장에서 하는 말은 교수님의 말과 결국 같은 말을 하고 있는 것 같다. (결국 배웠던 거지만 간과하고 있던 내용…)</p>\n</blockquote>\n<h1 id=\"️-협력하는-객체들의-공동체\" style=\"position:relative;\"><a href=\"#%EF%B8%8F-%ED%98%91%EB%A0%A5%ED%95%98%EB%8A%94-%EA%B0%9D%EC%B2%B4%EB%93%A4%EC%9D%98-%EA%B3%B5%EB%8F%99%EC%B2%B4\" aria-label=\"️ 협력하는 객체들의 공동체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>☕️ 협력하는 객체들의 공동체</h1>\n<p>흔히 객체지향을 실세계의 모방이라는 개념으로 설명한다. 하지만 실제로는 새로운 세계를 만드는 것에 가깝다. 그럼에도 불구하고 계속해서 ‘실세계의 모방’으로 설명하는 이유는 실무적인 관점에서는 부적합하지만 ‘객체 지향’을 기본적으로 학습하기엔 효과적이기 때문이다. 따라서 기본적인 내용을 설명하기 위해 실세계 사물의 모방이라는 관점으로 객체지향의 다양한 개념을 살펴보자.</p>\n<h2 id=\"협력하는-사람들\" style=\"position:relative;\"><a href=\"#%ED%98%91%EB%A0%A5%ED%95%98%EB%8A%94-%EC%82%AC%EB%9E%8C%EB%93%A4\" aria-label=\"협력하는 사람들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>협력하는 사람들</h2>\n<p>카페에서 손님이 커피를 주문하고, 캐셔가 주문을 받고, 바리스타가 주문대로 커피를 만들면, 캐셔가 커피가 나왔다는 안내를 하고, 손님이 커피를 받아간다.</p>\n<p>이게 모두 커피 주문이라는 <code class=\"language-text\">협력 관계</code>에 참여하는 사람들이 각자의 <code class=\"language-text\">역할</code>과 <code class=\"language-text\">책임</code>을 다하기 때문에 가능한 일이다.</p>\n<h3 id=\"요청과-응답으로-구성된-협력\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%B2%AD%EA%B3%BC-%EC%9D%91%EB%8B%B5%EC%9C%BC%EB%A1%9C-%EA%B5%AC%EC%84%B1%EB%90%9C-%ED%98%91%EB%A0%A5\" aria-label=\"요청과 응답으로 구성된 협력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요청과 응답으로 구성된 협력</h3>\n<p>사람들은 스스로 해결하지 못하는 문제와 마주치면 해결할 수 있는 사람에게 도움을 요청(request)한다. 그리고 또 그 사람은 다른 사람에게 요청하고, 또 반대 방향으로 응답이 연쇄적으로 일어난다.</p>\n<h3 id=\"역할과-책임\" style=\"position:relative;\"><a href=\"#%EC%97%AD%ED%95%A0%EA%B3%BC-%EC%B1%85%EC%9E%84\" aria-label=\"역할과 책임 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>역할과 책임</h3>\n<p>사람들은 <code class=\"language-text\">협력</code>을 위해 특정한 <code class=\"language-text\">역할</code>을 맡고, <code class=\"language-text\">역할</code>에 적합한 <code class=\"language-text\">책임</code>을 수행한다. 이것으로부터 중요한 개념을 알 수 있다.</p>\n<ul>\n<li>여러 사람이 동일한 역할을 수행할 수 있다. 역할에 맡는 책임만 다한다면 사람이 달라져도 상관없다.</li>\n<li>동일한 역할을 수행할 수 있다면 다른 사람이 일을 해도 상관없다.</li>\n<li>책임을 수행하는 방법은 자율적으로 선택할 수 있다. 어떻게든 하기만 하면 된다. 동일한 요청을 받더라도 역할을 수행하는 사람마다 다른 방식(커피 주세요 -> 핸드드립, 커피 머신으로 내리기 등등..)으로 요청을 처리할 수 있다. 이처럼 동<u><strong>일한 요청에 대해 서로 다른 방식으로 응답할 수 있는 능력</strong></u>을 <code class=\"language-text\">다형성</code>이라고 한다.</li>\n<li>한 사람이 동시에 여러 역할을 수행할 수 있다.</li>\n</ul>\n<p>이 개념들이 객체에도 똑같이 적용된다.</p>\n<h2 id=\"-역할-책임-협력\" style=\"position:relative;\"><a href=\"#-%EC%97%AD%ED%95%A0-%EC%B1%85%EC%9E%84-%ED%98%91%EB%A0%A5\" aria-label=\" 역할 책임 협력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👥 역할, 책임, 협력</h2>\n<p>사용자가 최종적으로 인식하게 되는 시스템의 기능은 객체<u><strong>들</strong></u>이 협력한 결과다. 결론적으로 시스템은 <u><strong>역할과 책임을 수행하는 객체</strong></u>로 분할되고, 시스템의 기능은 <u><strong>객체 간의 연쇄적인 요청/응답의 흐름</strong></u>으로 구성된 <u><strong>협력</strong></u>으로 구현된다.</p>\n<p>객체지향 설계 시엔 객체에게 적절한 책임을 할당하는 것이 중요하다. 책임이 불분명한 객체는 애플리케이션의 미래 역시 불분명하게 만든다.</p>\n<blockquote>\n<p>SOLID 원칙 중에 단일 책임 원칙(SRP: 한 클래스는 하나의 책임만 가져야 한다)가 생각났다.</p>\n</blockquote>\n<h2 id=\"-협력-속에-사는-객체\" style=\"position:relative;\"><a href=\"#-%ED%98%91%EB%A0%A5-%EC%86%8D%EC%97%90-%EC%82%AC%EB%8A%94-%EA%B0%9D%EC%B2%B4\" aria-label=\" 협력 속에 사는 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>👤 협력 속에 사는 객체</h2>\n<p>과거의 전통적인 개발 방법은 데이터와 프로세스를 엄격하게 구분한다. 이반면 객체지향에서는 그 둘을 객체라는 하나의 틀 안에 묶어 놓으면서, 객체의 자율성을 보장한다.</p>\n<ul>\n<li>객체 스스로 자신의 상태를 알고 어떤 행동을 할 수 있다는 것이다.</li>\n</ul>\n<p>객체는 다른 객체와 협력하기 위해 메시지를 전송한다. 메세지를 받은 수신자는 미리 정해진 자신만의 방법인 <code class=\"language-text\">메서드(method)</code>를 통해 메세지를 처리한다. 그리고 객체지향 프로그래밍 언어에서 메서드는 클래스 안에 포함된 함수, 프로시저를 통해 구현된다.</p>\n<p>메세지를 수신한 객체가 실행 시간에 메세지를 바탕으로 특정 메서드를 선택할 수 있다는 점은 다른 프로그래밍 언어와 객체지향 프로그래밍 언어를 구분짓는 핵심적인 특징 중 하나이다. 바로 프로시저 호출에 대한 실행 코드를 컴파일 시간에 결정하는 절차적인 언어와 확연히 구분되는 특징이다.</p>\n<p>메세지와 메서드를 분리함으로써 객체들 간의 자율성이 증가한다. 메세지를 받고 객체가 판단해서 처리하는 메서드를 선택하는 것이다. 이게 자율성을 증가하는 핵심이고, <u><strong>캡슐화</strong></u>와도 깊은 관련이 있다.</p>\n<blockquote>\n<p>인터페이스와 구현체를 말하는 걸까? 혹은 다형성 기반으로 런타임에 결정되는 메서드 호출?</p>\n</blockquote>\n<h2 id=\"-객체지향의-본질\" style=\"position:relative;\"><a href=\"#-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98-%EB%B3%B8%EC%A7%88\" aria-label=\" 객체지향의 본질 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎥 객체지향의 본질</h2>\n<p>그래서 객체지향이 뭔데?</p>\n<ul>\n<li>\n<p>객체지향이란 시스템을 <u><strong>상호작용</strong></u>하는 <code class=\"language-text\">자율적인 객체</code>들의 공동체로 바라보고 객체를 이용해 시스템을 분할하는 방법.</p>\n<blockquote>\n<p>저번 학기 객체지향개발방법론 수업을 들으면서, 교수님이 정말 강조했던 내용이 있다.</p>\n<p>객체지향의 핵심은 결국 객체이고,</p>\n<p>시스템을 구성하는 오브젝트들의 커뮤니케이션(메세지 패싱, 콜라보레이션)을 통해 시스템이 제공해야할 서비스(시스템 오퍼레이션)을 제공하는 것이라고 하셨다.</p>\n<p>즉 객체들 간의 협력을 통해 서비스를 제공하는 것이라는 의미이므로, 결국 비슷한 말을 하고 있는 것 같다.</p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">자율적인 객체</code>란 상태와 행위(데이터와 프로세스)를 함께 지니고 스스로 자기 자신을 책임지는 객체를 의미</p>\n</li>\n<li>\n<p>객체는 시스템의 행위-operation?-를 구현하기 위해 <u><strong>다른 객체와 협력</strong></u>한다. 각 객체는 <u><strong>협력 내에서 정해진 역할</strong></u>을 수행하고, 역할은 관련된 <u><strong>책임의 직합</strong></u>이다.</p>\n</li>\n<li>\n<p>객체는 다른 객체에게 협력을 요청하면서 <u><strong>메세지를 전송</strong></u>하고, 메세지를 수신한 객체는 메세지 처리에 적합한 <u><strong>메서드를 자율적으로 선택</strong></u>한다.</p>\n</li>\n</ul>\n<h3 id=\"객체를-지향해라-클래스가-아니고\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%A7%80%ED%96%A5%ED%95%B4%EB%9D%BC-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%95%84%EB%8B%88%EA%B3%A0\" aria-label=\"객체를 지향해라 클래스가 아니고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체를 지향해라. 클래스가 아니고.</h3>\n<p>많은 사람들은 객체지향 -> 클래스를 떠올린다. 대부분 클래스를 정의하는 방법과 클래스 사이 상속에 초점을 맞춘다. 또 대부분 UML의 대표적인 다이어그램으로 클래스 다이어그램을 뽑는다. 또한 객체지향 분석/설계의 목적을 훌륭한 클래스를 십결하는 것으로 배운다.</p>\n<p>클래스가 객체지향 프로그래밍 언어의 관점에서 매우 중요한 구성요소인 것은 맞지만, 객체지향의 핵심을 이루는 중심 개념은 아니다. 자바스크립트 같은 프로토타입 기반 객체지향 언어에서는 <u><strong>클래스가 존재하지 않고 객체만이 존재</strong></u>한다. 또한 상속 역시 클래스가 아닌 객체 간의 위임(delegation) 메커니즘을 기반으로 한다.</p>\n<blockquote>\n<p>나 조차 자바스크립트가 객체지향 언어라는 말을 들고, ‘클래스도 없는데 왜 객체지향이야?‘라고 생각했었다. 나도 클래스를 중심으로 객체지향을 생각했던 듯…</p>\n</blockquote>\n<p>지나치게 클래스를 강조하면 <u><strong>객체의 캡슐화를 저해하고 클래스를 서로 강하게 결합</strong></u>시킨다.</p>\n<p>애플리케이션을 <u><strong>협력하는 객체들의 공동체</strong></u>가 아닌 <u><strong>클래스로 구성된 설계도</strong></u>로 보는 관점은 유연하고 확장 가능한 애플리케이션의 구축을 방해한다.</p>\n<p>우선 ‘코드를 담는 클래스’에 집중하던 걸 ‘메세지를 주고받는 객체’의 관점으로 중심을 바꾸자. 중요한 건 어떤 클래스가 필요한 지가 아니고 어떤 객체들이 어떤 메세지를 주고받으며 협력하는가다. 클래스는 그리고 그런 협력 관계를 코드로 옮기는 도구일 뿐이다.</p>\n<p>객체지향의 중심에는 클래스가 아니라 객체가 위치하며, 중요한 것은 클래스들의 정적인 관계가 아니라 메세지를 주고받는 객체들의 동적인 관계다.</p>\n<blockquote>\n<p>역시 객체지향개발방법론 수업에서, OOAD에서는 시퀀스 다이어그램을 통해 클래스 다이어그램을 뽑아내는 것이지, 클래스를 먼저 생각하는 것이 아니라고 하셨다.</p>\n<p>즉, 시퀀스 다이어그램 같은 dynamic model을 통해 그걸 모으면 static model인 클래스 다이어그램이 나오는 것이다.</p>\n<p>시퀀스 다이어그램은 시스템을 구성하는 객체들의 커뮤니케이션이 나타난다. 즉 이 책에서 말하는 것과 같이 메세지를 주고받는 객체들의 동적인 관계가 객체지향의 중심인 것이다.</p>\n</blockquote>\n<p>클래스의 구조와 메서드가 아닌 <u><strong>역할, 책임, 협력</strong></u>에 집중하자. 객체지향은 객체를 지향하는 것이지 <u><strong>클래스를 지향하는 것이 아니다.</strong></u></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98-%EC%82%AC%EC%8B%A4%EA%B3%BC-%EC%98%A4%ED%95%B4--%EC%97%AD%ED%95%A0-%EC%B1%85%EC%9E%84-%ED%98%91%EB%A0%A5-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EB%B3%B8-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5\">📓 객체지향의 사실과 오해 | 역할, 책임, 협력 관점에서 본 객체지향</a></p>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%ED%98%91%EB%A0%A5%ED%95%98%EB%8A%94-%EA%B0%9D%EC%B2%B4%EB%93%A4%EC%9D%98-%EA%B3%B5%EB%8F%99%EC%B2%B4\">☕️ 협력하는 객체들의 공동체</a></p>\n<ul>\n<li>\n<p><a href=\"#%ED%98%91%EB%A0%A5%ED%95%98%EB%8A%94-%EC%82%AC%EB%9E%8C%EB%93%A4\">협력하는 사람들</a></p>\n<ul>\n<li><a href=\"#%EC%9A%94%EC%B2%AD%EA%B3%BC-%EC%9D%91%EB%8B%B5%EC%9C%BC%EB%A1%9C-%EA%B5%AC%EC%84%B1%EB%90%9C-%ED%98%91%EB%A0%A5\">요청과 응답으로 구성된 협력</a></li>\n<li><a href=\"#%EC%97%AD%ED%95%A0%EA%B3%BC-%EC%B1%85%EC%9E%84\">역할과 책임</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%97%AD%ED%95%A0-%EC%B1%85%EC%9E%84-%ED%98%91%EB%A0%A5\">👥 역할, 책임, 협력</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%98%91%EB%A0%A5-%EC%86%8D%EC%97%90-%EC%82%AC%EB%8A%94-%EA%B0%9D%EC%B2%B4\">👤 협력 속에 사는 객체</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98-%EB%B3%B8%EC%A7%88\">🎥 객체지향의 본질</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%A7%80%ED%96%A5%ED%95%B4%EB%9D%BC-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%95%84%EB%8B%88%EA%B3%A0\">객체를 지향해라. 클래스가 아니고.</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"October 06, 2022","title":"01. 협력하는 객체들의 공동체 |📓 객체지향의 사실과 오해","categories":"도서","author":"goldggyul","emoji":null,"imageEmoji":"working.png"},"fields":{"slug":"/book-object-real-001/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://goldggyul.github.io","comments":{"utterances":{"repo":"goldggyul/goldggyul.github.io"}}}}},"pageContext":{"slug":"/spring-core-basic-001/","nextSlug":"/book-object-real-001/","prevSlug":""}},"staticQueryHashes":["1956554647","2938748437","3350743975","3454833782"]}