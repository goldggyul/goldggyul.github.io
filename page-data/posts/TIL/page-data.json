{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/TIL","result":{"pageContext":{"currentCategory":"TIL","categories":["All","TIL","Python"],"edges":[{"node":{"id":"59f99dde-796b-5bae-bb72-5009bb50c8bd","excerpt":"파이썬 문법 정리 : 문자열 검색 사용법 찾는 문자가 존재하면 index 반환 없으면 -1 반환 이 때 인덱스는 string의 인덱스를 뜻하는 것 시간 복잡도는 정확하게 나온 걸 찾지 못해서 모르겠지만 C++ 의 경우 string의 길이가  n, substring의 길이가 m이면  이므로 같을 것 같다.  operator 근데 나는 문자열이 있는 지 아닌지를 찾으려고 find를 썼는데, 파이썬 docs를 보니까 substring의 position을 찾으려고 하는 게 아니면  operator를 쓰라고 한다. (근데 백준에서 봤을 때 시간 차이는 얼마 안난다)  입력받기 엔터로 구분된 입력 받기 파이썬에서 언더스코어의 의미는 인터프리터에서 마지막 값 저장할 때 don’t care: 값 무시하고 싶을 때 특별한 의미의 네이밍을 할 때 예를 들어 클래스의 private 변수들에 맨 앞에 붙여서 사용 단 진정한 private를 지원하진 않으므로 직접 가져다 쓰면 가능 숫자의 자릿수 구분자(…","fields":{"slug":"/til-002/"},"frontmatter":{"categories":"TIL Python","title":"파이썬 문법 정리 | TIL ＃3","date":"September 09, 2022"}},"next":{"fields":{"slug":"/til-001/"}},"previous":null},{"node":{"id":"842faac4-9ac9-5a02-b302-f7a95068fc8b","excerpt":"Synchronous vs. Non-blocking? 교수님께서 Synchronous의 반대가 Nonblocking처럼 설명하셨는데 둘은 반대라기보다는 다른 느낌으로 알고 있어서 한 번 찾아봤다. 동기 vs 비동기 (feat. blocking vs non-blocking) [10분 테코톡] 🎧 우의 Block vs Non-Block & Sync vs Async Blocking vs. Non-blocking  에 초점을 둔다. 예를 들어 함수 A에서 함수 B를 call했을 때 Blocking: B는 할 일을 다 마쳐야 A에게 제어권을 준다. Non-blocking: B는 할 일을 마치지 않았어도 A에게 제어권을 넘겨준다. 따라서 Blocking이라면 A는 다른 일을 못하고 대기해야 한다. Synchronous vs. Asynchronous 를 처리하는 쪽에 초점을 둔다. 예를 들어 함수 A에서 함수 B를 call했을 때 Synchronous: A는 함수 B가 완료 했는 지를 계속 체…","fields":{"slug":"/til-001/"},"frontmatter":{"categories":"TIL Python","title":"Synchronous vs. Non-blocking? / 파이썬 기본 문법 정리 | TIL ＃2","date":"September 08, 2022"}},"next":null,"previous":{"fields":{"slug":"/til-002/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}