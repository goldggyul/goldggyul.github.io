{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/TIL","result":{"pageContext":{"currentCategory":"TIL","categories":["All","운영체제","TIL","Python","Java"],"edges":[{"node":{"id":"864987d1-cbbf-599b-849c-d7ce534ddd9f","excerpt":"와  둘다 인자로 iterable한 객체(문자열, 리스트, 튜플 등)를 받는다. 객체를 돌면서 조건을 검사한 후 True나 False를 반환한다. any는 or, all은 and 연산 과  둘다 인자로 iterable한 객체를 받는다. 그래서 그냥 여러 인자를 줘도 된다. String  format을 이용해서 placeholder({})를 사용하여 더 쉽게 문자열을 만들 수 있다. 소수점 아래 n째 자리까지도 나타낼 수 있다. 참고  문자열 안에 변수 쉽게 삽입하기 일반적인 문자열(”, \"\") 앞에 또는  문자만 붙여주면 f-string이 된다. f-string은 괄호를 사용하여 f-string 안에 표현식을 삽입할 수 있다. 참고 삼항 연산자 대신에 다르게 쓴다.  삼항 연산자도 중첩이 가능하지만 가독성을 생각하자. 참고 여러 인자 리턴하기 파이썬은 함수에서 여러 인자 리턴하는 게 된다..! 그냥 하듯이 하면 된다. 어쩔 때는 하나 리턴하고 어쩔 땐 두개 리턴하는 것도 가능하다 …","tableOfContents":"<ul>\n<li>\n<p><a href=\"#code-classlanguage-textanycode%EC%99%80-code-classlanguage-textallcode\"><code class=\"language-text\">any</code>와 <code class=\"language-text\">all</code></a></p>\n</li>\n<li>\n<p><a href=\"#code-classlanguage-textmincode%EA%B3%BC-code-classlanguage-textmaxcode\"><code class=\"language-text\">min</code>과 <code class=\"language-text\">max</code></a></p>\n</li>\n<li>\n<p><a href=\"#string-code-classlanguage-textformatcode\">String <code class=\"language-text\">format()</code></a></p>\n<ul>\n<li><a href=\"#code-classlanguage-textf-stringcode-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%95%88%EC%97%90-%EB%B3%80%EC%88%98-%EC%89%BD%EA%B2%8C-%EC%82%BD%EC%9E%85%ED%95%98%EA%B8%B0\"><code class=\"language-text\">f-string</code> 문자열 안에 변수 쉽게 삽입하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%82%BC%ED%95%AD-%EC%97%B0%EC%82%B0%EC%9E%90\">삼항 연산자</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%97%AC%EB%9F%AC-%EC%9D%B8%EC%9E%90-%EB%A6%AC%ED%84%B4%ED%95%98%EA%B8%B0\">여러 인자 리턴하기</a></p>\n<ul>\n<li><a href=\"#%EC%96%B8%ED%8C%A8%ED%82%B9\">언패킹</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#code-classlanguage-textzipcode\"><code class=\"language-text\">zip()</code></a></p>\n</li>\n<li>\n<p><a href=\"#code-classlanguage-textarraycode---extended-slices\"><code class=\"language-text\">Array[::]</code> - Extended Slices</a></p>\n</li>\n</ul>","fields":{"slug":"/til-003/"},"frontmatter":{"categories":"TIL Python","title":"파이썬 문법 정리 | TIL ＃3","date":"September 11, 2022"}},"next":{"fields":{"slug":"/til-002/"}},"previous":{"fields":{"slug":"/os-001-process/"}}},{"node":{"id":"59f99dde-796b-5bae-bb72-5009bb50c8bd","excerpt":"파이썬 문법 정리 : 문자열 검색 사용법 찾는 문자가 존재하면 index 반환 없으면 -1 반환 이 때 인덱스는 string의 인덱스를 뜻하는 것 시간 복잡도는 정확하게 나온 걸 찾지 못해서 모르겠지만 C++ 의 경우 string의 길이가  n, substring의 길이가 m이면  이므로 같을 것 같다.  operator 근데 나는 문자열이 있는 지 아닌지를 찾으려고 find를 썼는데, 파이썬 docs를 보니까 substring의 position을 찾으려고 하는 게 아니면  operator를 쓰라고 한다. (근데 백준에서 봤을 때 시간 차이는 얼마 안난다)  입력받기 엔터로 구분된 입력 받기 파이썬에서 언더스코어의 의미는 인터프리터에서 마지막 값 저장할 때 don’t care: 값 무시하고 싶을 때 특별한 의미의 네이밍을 할 때 예를 들어 클래스의 private 변수들에 맨 앞에 붙여서 사용 단 진정한 private를 지원하진 않으므로 직접 가져다 쓰면 가능 숫자의 자릿수 구분자(…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%AC%B8%EB%B2%95-%EC%A0%95%EB%A6%AC\">파이썬 문법 정리</a></p>\n<ul>\n<li>\n<p><a href=\"#code-classlanguage-textfindcode-%EB%AC%B8%EC%9E%90%EC%97%B4-%EA%B2%80%EC%83%89\"><code class=\"language-text\">find</code>: 문자열 검색</a></p>\n<ul>\n<li><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\">사용법</a></li>\n<li><a href=\"#code-classlanguage-textincode-operator\"><code class=\"language-text\">in</code> operator</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9E%85%EB%A0%A5%EB%B0%9B%EA%B8%B0\">입력받기</a></p>\n<ul>\n<li><a href=\"#%EC%97%94%ED%84%B0%EB%A1%9C-%EA%B5%AC%EB%B6%84%EB%90%9C-%EC%9E%85%EB%A0%A5-%EB%B0%9B%EA%B8%B0\">엔터로 구분된 입력 받기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9E%85%EB%A0%A5-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EB%B0%9B%EA%B8%B0\">입력 빠르게 받기</a></p>\n<ul>\n<li><a href=\"#code-classlanguage-textsysstdinreadlinecode\"><code class=\"language-text\">sys.stdin.readline()</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/til-002/"},"frontmatter":{"categories":"TIL Python","title":"파이썬 문법 정리 | TIL ＃2","date":"September 09, 2022"}},"next":{"fields":{"slug":"/til-001/"}},"previous":{"fields":{"slug":"/til-003/"}}},{"node":{"id":"842faac4-9ac9-5a02-b302-f7a95068fc8b","excerpt":"Synchronous vs. Non-blocking? 교수님께서 Synchronous의 반대가 Nonblocking처럼 설명하셨는데 둘은 반대라기보다는 다른 느낌으로 알고 있어서 한 번 찾아봤다. 동기 vs 비동기 (feat. blocking vs non-blocking) [10분 테코톡] 🎧 우의 Block vs Non-Block & Sync vs Async Blocking vs. Non-blocking  에 초점을 둔다. 예를 들어 함수 A에서 함수 B를 call했을 때 Blocking: B는 할 일을 다 마쳐야 A에게 제어권을 준다. Non-blocking: B는 할 일을 마치지 않았어도 A에게 제어권을 넘겨준다. 따라서 Blocking이라면 A는 다른 일을 못하고 대기해야 한다. Synchronous vs. Asynchronous 를 처리하는 쪽에 초점을 둔다. 예를 들어 함수 A에서 함수 B를 call했을 때 Synchronous: A는 함수 B가 완료 했는 지를 계속 체…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#synchronous-vs-non-blocking\">Synchronous vs. Non-blocking?</a></p>\n<ul>\n<li><a href=\"#blocking-vs-non-blocking\">Blocking vs. Non-blocking</a></li>\n<li><a href=\"#synchronous-vs-asynchronous\">Synchronous vs. Asynchronous</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#python-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95%EB%93%A4\">Python 기본 문법들</a></p>\n</li>\n<li>\n<p><a href=\"#naming-convention\">Naming convention</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%EC%9E%85%EB%A0%A5-%EB%B0%9B%EA%B8%B0\">1. 입력 받기</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EB%B0%98%EB%B3%B5%EB%AC%B8\">2. 반복문</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EB%AC%B8%EC%9E%90\">3. 문자</a></p>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%9E%90-%EF%B8%8F-%EC%95%84%EC%8A%A4%ED%82%A4%EC%BD%94%EB%93%9C\">문자 ↔️ 아스키코드</a></li>\n<li><a href=\"#%EB%AC%B8%EC%9E%90-vs-%EC%88%AB%EC%9E%90\">문자 vs. 숫자</a></li>\n<li><a href=\"#%EC%9E%90%EB%A3%8C%ED%98%95-%ED%81%AC%EA%B8%B0\">자료형 크기?</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%9E%90%EB%A5%B4%EA%B8%B0slicing\">문자열 자르기(Slicing)</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A0%95%EB%A0%AC\">정렬</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%B9%84%EA%B5%90%EC%9E%90-cmp\">비교자 cmp</a></p>\n<ul>\n<li><a href=\"#python3\">Python3</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#key-%ED%95%A8%EC%88%98-%EB%84%A3%EC%96%B4%EC%84%9C-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0\">Key 함수 넣어서 정렬하기</a></p>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/til-001/"},"frontmatter":{"categories":"TIL Python","title":"Synchronous vs. Non-blocking? / 파이썬 기본 문법 정리 | TIL ＃1","date":"September 08, 2022"}},"next":{"fields":{"slug":"/java-001/"}},"previous":{"fields":{"slug":"/til-002/"}}}]}},"staticQueryHashes":["1956554647","2938748437","3454833782"]}