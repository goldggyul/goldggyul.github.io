{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"db62fa93-321c-5432-bf13-b0f74225d9ff","excerpt":"본 게시글은 스프링 핵심 원리 - 기본편 강의를 듣고 정리했습니다. ☘️ 스프링 핵심 원리 이해1 - 예제 만들기 그럼 인터페이스(역할)와 구현하는 객체를 나누어서 개발을 해보자 📌 프로젝트 생성 순수 자바로만 할거라 스프링을 쓰진 않지만 세팅할 때 스프링부트를 이용하면 편해서 일단 스프링부트로 생성하자 -> 스프링 부트 스타터 스프링 부트 버전에서 snapshot, m5 이런 건 안정화가 아직 안된 것이니 가장 최신 안정화가 된 걸 선택하자. (현재 시점 2.7.4) artifact가 프로젝트 빌드명이 된다. 자바 11 dependency는 선택하지 않는다. 생성 후 인텔리제이에서 열어주자. 이 때 Preference>Build>Build Tools>Gradle에서 Build and run, Run tests를 gradle이 아닌 intellij를 사용하도록 변경하자. 이게 좀 더 빠르다. 📌 비즈니스 요구사항 역할과 구현 구분하기! 우선 요구사항은 3가지로 , , 이 있다. 회원…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EC%9D%B4%ED%95%B41---%EC%98%88%EC%A0%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\">☘️ 스프링 핵심 원리 이해1 - 예제 만들기</a></p>\n<ul>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\">📌 프로젝트 생성</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD\">📌 비즈니스 요구사항</a></p>\n<ul>\n<li><a href=\"#%ED%9A%8C%EC%9B%90\">회원</a></li>\n<li><a href=\"#%EC%A3%BC%EB%AC%B8%EA%B3%BC-%ED%95%A0%EC%9D%B8-%EC%A0%95%EC%B1%85\">주문과 할인 정책</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EC%9B%90-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%84%A4%EA%B3%84\">📌 회원 도메인 설계</a></p>\n<ul>\n<li><a href=\"#%ED%9A%8C%EC%9B%90-%EB%8F%84%EB%A9%94%EC%9D%B8-%ED%98%91%EB%A0%A5-%EA%B4%80%EA%B3%84\">회원 도메인 협력 관계</a></li>\n<li><a href=\"#%ED%9A%8C%EC%9B%90-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8\">회원 클래스 다이어그램</a></li>\n<li><a href=\"#%ED%9A%8C%EC%9B%90-%EA%B0%9D%EC%B2%B4-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8\">회원 객체 다이어그램</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EC%9B%90-%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B0%9C%EB%B0%9C\">📌 회원 도메인 개발</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EC%9B%90-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%8B%A4%ED%96%89%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8\">📌 회원 도메인 실행과 테스트</a></p>\n<ul>\n<li><a href=\"#main%EC%97%90%EC%84%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\">main에서 테스트</a></li>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1\">테스트 함수 작성</a></li>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\">문제점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%A3%BC%EB%AC%B8%EA%B3%BC-%ED%95%A0%EC%9D%B8-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%84%A4%EA%B3%84\">📌 주문과 할인 도메인 설계</a></p>\n<ul>\n<li><a href=\"#u%ED%98%91%EB%A0%A5-%EC%97%AD%ED%95%A0-%EC%B1%85%EC%9E%84u\"><u>협력, 역할, 책임</u></a></li>\n<li><a href=\"#%EC%97%AD%ED%95%A0--%EA%B5%AC%ED%98%84\">역할 + 구현</a></li>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8\">클래스 다이어그램</a></li>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8\">객체 다이어그램</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%A3%BC%EB%AC%B8%EA%B3%BC-%ED%95%A0%EC%9D%B8-%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B0%9C%EB%B0%9C\">📌 주문과 할인 도메인 개발</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%A3%BC%EB%AC%B8%EA%B3%BC-%ED%95%A0%EC%9D%B8-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%8B%A4%ED%96%89%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8\">📌 주문과 할인 도메인 실행과 테스트</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%A0%95%EB%A6%AC\">🍄 정리</a></p>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-core-basic-002/"},"frontmatter":{"categories":"강의","title":"예제 만들기 - 스프링 핵심 원리 기본편 02 | 매일 1시간 👨🏻‍🏫 7일차","date":"October 07, 2022"}},"next":{"fields":{"slug":"/book-object-real-002/"}},"previous":null},{"node":{"id":"fed3c6da-efb4-546f-afde-18ce4697ef9e","excerpt":"본 게시글은 객체지향의 사실과 오해 책을 읽고 작성했습니다. 📓 객체지향의 사실과 오해 | 역할, 책임, 협력 관점에서 본 객체지향 세 줄 요약 객체는 협력하기 위한 존재이므로, 협력에 참여할 수 있는 유일한 방법인 행동에 초점을 맞춰라. 그 이후에 필요한 상태를 선택하게 되는 것이다. 객체는 협력 속에서 메세지를 통해 행동이 유발되지만, 객체의 상태가 변경될 지 아닐 지는 객체 스스로 결정한다. 객체가 상태를 숨기고 행동을 경계로 캡슐화함으로써 객체의 자율성이 높아지고 협력을 단순하고 유연하게 만들 수 있다. 😼 이상한 나라의 객체 객체 객체지향과 인지 능력 객체지향 패러다임은 인간이 인지할 수 있는 다양한 객체들이 모여 현실 세계를 이루는 것처럼, 소프트웨어의 세계 역시 인간이 인지할 수 있는 다양한 소프트웨어 객체들이 모여 이루어져 있다는 믿음에서 출발한다. 현실세계와 소프트웨어 세계 사이의 유사성은 여기까지고, 객체지향 패러다임의 목적은 현실 세계와 소프트웨어 세계의 1:1…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98-%EC%82%AC%EC%8B%A4%EA%B3%BC-%EC%98%A4%ED%95%B4--%EC%97%AD%ED%95%A0-%EC%B1%85%EC%9E%84-%ED%98%91%EB%A0%A5-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EB%B3%B8-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5\">📓 객체지향의 사실과 오해 | 역할, 책임, 협력 관점에서 본 객체지향</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%9D%B4%EC%83%81%ED%95%9C-%EB%82%98%EB%9D%BC%EC%9D%98-%EA%B0%9D%EC%B2%B4\">😼 이상한 나라의 객체</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4\">객체</a></li>\n<li><a href=\"#-%ED%96%89%EB%8F%99%EC%9D%B4-%EC%83%81%ED%83%9C%EB%A5%BC-%EA%B2%B0%EC%A0%95%ED%95%9C%EB%8B%A4\">✨ 행동이 상태를 결정한다</a></li>\n<li><a href=\"#%EC%9D%B4%EC%83%81%ED%95%9C-%EB%82%98%EB%9D%BC%EB%A5%BC-%EC%B0%BD%EC%A1%B0%ED%95%98%EB%9D%BC\">이상한 나라를 창조하라</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/book-object-real-002/"},"frontmatter":{"categories":"도서","title":"02. 이상한 나라의 객체 |📓 객체지향의 사실과 오해","date":"October 07, 2022"}},"next":{"fields":{"slug":"/spring-core-basic-001/"}},"previous":{"fields":{"slug":"/spring-core-basic-002/"}}},{"node":{"id":"96714aea-77d7-5225-96bf-abf1ec1c95b3","excerpt":"본 게시글은 스프링 핵심 원리 - 기본편 강의를 듣고 정리했습니다. ☘️ 객체 지향 설계와 스프링 스프링을 제대로 학습하려면 스프링이 제공하는 기능만 아는 게 아니라 객체지향의 원리와, 그 원리를 스프링이 어떻게 지원하는 지 함께 풀어가면서 이해해야 한다! 이 과정을 이해하고 나면 개발, 설계하는 시야가 달라지고 정말 재밌어진다. 단순히 스프링 기능을 배우는 건 어렵지 않고, 스프링이 제공하는 핵심 가치와 원리를 제대로 파악하려면 객체 지향을 이해해야 한다. 스프링의 본질을 이해했다는 것은 객체 지향 설계의 본질을 이해하는 것과 같다. 📌 자바 진영의 추운 겨울과 스프링의 탄생 당시 쓰던 EJB(Enterprise Java Bean)… 하지만 여기서 불편함을 느끼고 과  두 기술이 개발되었다. 스프링은 EJB 컨테이너, 하이버네이트는 EJB 엔티티빈 기술을 대체하게 되었다. 그리고 하이버네이트를 바탕으로 자바 ORM 표준으로 JPA가 나오게 되었다. EJB의 문제점을 지적하고, EJ…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%99%80-%EC%8A%A4%ED%94%84%EB%A7%81\">☘️ 객체 지향 설계와 스프링</a></p>\n<ul>\n<li>\n<p><a href=\"#-%EC%9E%90%EB%B0%94-%EC%A7%84%EC%98%81%EC%9D%98-%EC%B6%94%EC%9A%B4-%EA%B2%A8%EC%9A%B8%EA%B3%BC-%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%98-%ED%83%84%EC%83%9D\">📌 자바 진영의 추운 겨울과 스프링의 탄생</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%B4%EB%9E%80\">📌 스프링이란?</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%83%9D%ED%83%9C%EA%B3%84\">스프링 생태계</a></li>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EA%B0%9C%EB%85%90\">스프링 핵심 개념</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%A2%8B%EC%9D%80-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80-\">📌 좋은 객체 지향 프로그래밍이란? ✨</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">객체 지향 프로그래밍</a></li>\n<li><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1\">다형성</a></li>\n<li><a href=\"#%EC%97%AD%ED%95%A0%EA%B3%BC-%EA%B5%AC%ED%98%84%EC%9D%84-%EB%B6%84%EB%A6%AC\">역할과 구현을 분리</a></li>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4%EB%8A%94-%ED%98%91%EB%A0%A5%EC%9D%B4%EB%9D%BC%EB%8A%94-%EA%B4%80%EA%B3%84%EB%B6%80%ED%84%B0-%EC%83%9D%EA%B0%81\">객체는 협력이라는 관계부터 생각</a></li>\n<li><a href=\"#%EC%9E%90%EB%B0%94-%EC%96%B8%EC%96%B4%EC%9D%98-%EB%8B%A4%ED%98%95%EC%84%B1---code-classlanguage-text%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9code\">자바 언어의 다형성 - <code class=\"language-text\">오버라이딩</code>!</a></li>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81%EA%B3%BC-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5\">스프링과 객체 지향</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-solid-%EC%A2%8B%EC%9D%80-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%9D%98-5%EA%B0%80%EC%A7%80-%EC%9B%90%EC%B9%99\">📌 SOLID: 좋은 객체 지향 설계의 5가지 원칙</a></p>\n<ul>\n<li><a href=\"#1-code-classlanguage-textsrpcode-%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99single-responsibility-principle\">1. <code class=\"language-text\">SRP</code>: 단일 책임 원칙(single responsibility principle)</a></li>\n<li><a href=\"#2-code-classlanguage-textocpcode-%EA%B0%9C%EB%B0%A9-%ED%8F%90%EC%87%84-%EC%9B%90%EC%B9%99-openclosed-principle\">2. ✨<code class=\"language-text\">OCP</code>: 개방-폐쇄 원칙 (Open/closed principle)</a></li>\n<li><a href=\"#3-code-classlanguage-textlspcode-%EB%A6%AC%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B9%98%ED%99%98-%EC%9B%90%EC%B9%99-liskov-substitution-principle\">3. <code class=\"language-text\">LSP</code>: 리스코프 치환 원칙 (Liskov substitution principle)</a></li>\n<li><a href=\"#4-code-classlanguage-textispcode-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%B6%84%EB%A6%AC-%EC%9B%90%EC%B9%99-interface-segregation-principle\">4. <code class=\"language-text\">ISP</code>: 인터페이스 분리 원칙 (Interface segregation principle)</a></li>\n<li><a href=\"#5-code-classlanguage-textdipcode-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%97%AD%EC%A0%84-%EC%9B%90%EC%B9%99-dependency-inversion-principle\">5. ✨<code class=\"language-text\">DIP</code>: 의존관계 역전 원칙 (Dependency inversion principle)</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%99%80-%EC%8A%A4%ED%94%84%EB%A7%81\">📌 객체 지향 설계와 스프링</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%B4-%EC%97%86%EC%9C%BC%EB%A9%B4\">스프링이 없으면..?</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC-1\">정리</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-core-basic-001/"},"frontmatter":{"categories":"강의","title":"객체 지향 설계와 스프링 - 스프링 핵심 원리 기본편 01 | 매일 1시간 👨🏻‍🏫 6일차","date":"October 06, 2022"}},"next":{"fields":{"slug":"/book-object-real-001/"}},"previous":{"fields":{"slug":"/book-object-real-002/"}}},{"node":{"id":"1274dea2-7096-557f-bcb5-a26a3fcd8a59","excerpt":"본 게시글은 객체지향의 사실과 오해 책을 읽고 작성했습니다. 📓 객체지향의 사실과 오해 | 역할, 책임, 협력 관점에서 본 객체지향 그래서 객체지향이 무엇인가?를 얘기하고자 하는 책인 듯하다. 저번 학기 객체지향개발방법론 수업을 들으면서, 교수님이 정말 정말 강조했던 내용이 있다. 객체지향의 핵심은 결국 객체이고, 시스템을 구성하는 오브젝트들의 커뮤니케이션(메세지 패싱, 콜라보레이션)을 통해 시스템이 제공해야할 서비스(시스템 오퍼레이션)을 제공하는 것이 객체지향 시스템이라고 하셨다. 즉, 객체들 간의 협력을 통해 시스템 오퍼레이션-서비스를 만들어내는 것이 객체지향 시스템이라는 말로 이해했다. 1장에서 하는 말은 교수님의 말과 결국 같은 말을 하고 있는 것 같다. (결국 배웠던 거지만 간과하고 있던 내용…) ☕️ 협력하는 객체들의 공동체 흔히 객체지향을 실세계의 모방이라는 개념으로 설명한다. 하지만 실제로는 새로운 세계를 만드는 것에 가깝다. 그럼에도 불구하고 계속해서 ‘실세계의 모방…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98-%EC%82%AC%EC%8B%A4%EA%B3%BC-%EC%98%A4%ED%95%B4--%EC%97%AD%ED%95%A0-%EC%B1%85%EC%9E%84-%ED%98%91%EB%A0%A5-%EA%B4%80%EC%A0%90%EC%97%90%EC%84%9C-%EB%B3%B8-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5\">📓 객체지향의 사실과 오해 | 역할, 책임, 협력 관점에서 본 객체지향</a></p>\n</li>\n<li>\n<p><a href=\"#%EF%B8%8F-%ED%98%91%EB%A0%A5%ED%95%98%EB%8A%94-%EA%B0%9D%EC%B2%B4%EB%93%A4%EC%9D%98-%EA%B3%B5%EB%8F%99%EC%B2%B4\">☕️ 협력하는 객체들의 공동체</a></p>\n<ul>\n<li>\n<p><a href=\"#%ED%98%91%EB%A0%A5%ED%95%98%EB%8A%94-%EC%82%AC%EB%9E%8C%EB%93%A4\">협력하는 사람들</a></p>\n<ul>\n<li><a href=\"#%EC%9A%94%EC%B2%AD%EA%B3%BC-%EC%9D%91%EB%8B%B5%EC%9C%BC%EB%A1%9C-%EA%B5%AC%EC%84%B1%EB%90%9C-%ED%98%91%EB%A0%A5\">요청과 응답으로 구성된 협력</a></li>\n<li><a href=\"#%EC%97%AD%ED%95%A0%EA%B3%BC-%EC%B1%85%EC%9E%84\">역할과 책임</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%97%AD%ED%95%A0-%EC%B1%85%EC%9E%84-%ED%98%91%EB%A0%A5\">👥 역할, 책임, 협력</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%98%91%EB%A0%A5-%EC%86%8D%EC%97%90-%EC%82%AC%EB%8A%94-%EA%B0%9D%EC%B2%B4\">👤 협력 속에 사는 객체</a></p>\n</li>\n<li>\n<p><a href=\"#-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98-%EB%B3%B8%EC%A7%88\">🎥 객체지향의 본질</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%A7%80%ED%96%A5%ED%95%B4%EB%9D%BC-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%95%84%EB%8B%88%EA%B3%A0\">객체를 지향해라. 클래스가 아니고.</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/book-object-real-001/"},"frontmatter":{"categories":"도서","title":"01. 협력하는 객체들의 공동체 |📓 객체지향의 사실과 오해","date":"October 06, 2022"}},"next":{"fields":{"slug":"/spring-hello-006/"}},"previous":{"fields":{"slug":"/spring-core-basic-001/"}}},{"node":{"id":"fdc7eb6d-081f-57c8-8e35-5484fa7415a0","excerpt":"본 게시글은 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 강의를 듣고 정리했습니다. ☘️ AOP Aspect Oriented Programming: 관점 지향 프로그래밍 📌 AOP가 필요한 상황 한 상황을 가정해보자. 메소드가 쭉 있는데.. 모든 메소드의 호출 시간을 측정하고 싶으면 어떻게 할까? 모든 메소드를 다 돌면서 타이머 누르고, 완료 시에 시간 재고.. 이걸 모두 추가해야한다! 만약 시간 측정 단위를 바꾸고 싶으면? 모든 메소드를 다시 돌면서 또 수정해야 한다. 문제: 공통 관심 사항(cross-cutting concern) vs 핵심 관심 사항(core concern) 시간을 측정하는 기능은 핵심 관심 사항이 아니다.  공통 관심 사항이다. 시간을 측정하는 로직과 핵심 비즈니스의 로직이 섞여서 유지보수가 어렵다. 시간을 측정하는 로직을 변경할 때 모든 로직을 찾아가면서 변경해야 한다. 그렇다고 시간을 측정하는 로직을 별도의 공통 로직으로 만들기…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-aop\">☘️ AOP</a></p>\n<ul>\n<li>\n<p><a href=\"#-aop%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%EC%83%81%ED%99%A9\">📌 AOP가 필요한 상황</a></p>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-u%EA%B3%B5%ED%86%B5-%EA%B4%80%EC%8B%AC-%EC%82%AC%ED%95%ADcross-cutting-concern-vs-%ED%95%B5%EC%8B%AC-%EA%B4%80%EC%8B%AC-%EC%82%AC%ED%95%ADcore-concernu\">문제: <u><strong>공통 관심 사항(cross-cutting concern) vs 핵심 관심 사항(core concern)</strong></u></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-aop-%EC%A0%81%EC%9A%A9\">📌 AOP 적용</a></p>\n<ul>\n<li><a href=\"#%ED%95%B4%EA%B2%B0\">해결</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%98-aop-%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D-u%ED%94%84%EB%A1%9D%EC%8B%9C-%EB%B0%A9%EC%8B%9D%EC%9D%98-aopu\">📌 스프링의 AOP 동작 방식: <u><strong>프록시 방식의 AOP</strong></u></a></p>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-hello-006/"},"frontmatter":{"categories":"강의","title":"AOP - 스프링 입문 | 매일 1시간 👨🏻‍🏫 5일차","date":"October 05, 2022"}},"next":{"fields":{"slug":"/spring-hello-005/"}},"previous":{"fields":{"slug":"/book-object-real-001/"}}},{"node":{"id":"32fe8627-4b43-5097-b137-9e26113665d6","excerpt":"본 게시글은 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 강의를 듣고 정리했습니다. ☘️ 스프링 DB 접근 기술 JPA도 스프링만큼 오래된 기술이다. JPA를 더 편리하게 쓸 수 있도록 감싼 게 스프링 데이터 JPA이다. 📌 H2 데이터베이스 보통 실무에서는 DB는 mysql, oracle을 활용한다. H2 데이터베이스는 가볍고 교육용으로 좋다. 접속 처음 이용할 때는 데이터베이스 파일을 만들어야 한다. 에 파일 경로를 입력하자. JDBC URL에 경로 입력 후에 만약 test라는 이름으로 생성했다면 test.mv.db가 있는 지 확인하자. 이렇게 파일 생성 이후에는 위에처럼 파일을 직접 접근하는 것이 아닌 소켓을 통해 접근해서 여러 곳에서 파일을 접근해도 문제가 없도록 해야 한다.   h2 연결 오류 (카프카랑 같이 쓸 때 조심하세요…) 근데 여기서 계속 오류가 났다.  도움말을 눌러서 보면 CONNECTION_BROKEN_1 The error with…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%8A%A4%ED%94%84%EB%A7%81-db-%EC%A0%91%EA%B7%BC-%EA%B8%B0%EC%88%A0\">☘️ 스프링 DB 접근 기술</a></p>\n<ul>\n<li>\n<p><a href=\"#-h2-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4\">📌 H2 데이터베이스</a></p>\n<ul>\n<li><a href=\"#member-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%9D%EC%84%B1\">member 테이블 생성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%88%9C%EC%88%98-jdbc\">📌 순수 JDBC</a></p>\n<ul>\n<li><a href=\"#buildgradle\">build.gradle</a></li>\n<li><a href=\"#db-%EC%A0%95%EB%B3%B4-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">db 정보 설정하기</a></li>\n<li><a href=\"#jdbcmemberrepository\">JdbcMemberRepository</a></li>\n<li><a href=\"#ocp\">OCP</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8\">📌 스프링 통합 테스트</a></p>\n<ul>\n<li><a href=\"#code-classlanguage-textspringboottestcode\"><code class=\"language-text\">@SpringBootTest</code></a></li>\n<li><a href=\"#code-classlanguage-texttransactionalcode\"><code class=\"language-text\">@Transactional</code></a></li>\n<li><a href=\"#code-classlanguage-textunit-testcode-vs-code-classlanguage-textintegration-testcode\"><code class=\"language-text\">Unit Test</code> Vs. <code class=\"language-text\">Integration Test</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81-jdbctemplate\">📌 스프링 JdbcTemplate</a></p>\n</li>\n<li>\n<p><a href=\"#-jpa-java-persistence-api\">📌 JPA: Java Persistence API</a></p>\n<ul>\n<li><a href=\"#interface\">Interface</a></li>\n<li><a href=\"#orm\">ORM</a></li>\n<li><a href=\"#buildgradle-1\">build.gradle</a></li>\n<li><a href=\"#applicationproperties\">application.properties</a></li>\n<li><a href=\"#code-classlanguage-textentitycode\"><code class=\"language-text\">@Entity</code></a></li>\n<li><a href=\"#code-classlanguage-textjpamemberrepositorycode\"><code class=\"language-text\">JpaMemberRepository</code></a></li>\n<li><a href=\"#%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0\">저장하기</a></li>\n<li><a href=\"#pk%EA%B0%92%EC%9C%BC%EB%A1%9C-%EA%B0%9D%EC%B2%B4-%EC%B0%BE%EA%B8%B0\">pk값으로 객체 찾기</a></li>\n<li><a href=\"#%EA%B7%B8-%EC%99%B8-%EA%B0%92%EC%9C%BC%EB%A1%9C-%EA%B0%9D%EC%B2%B4-%EC%B0%BE%EA%B8%B0\">그 외 값으로 객체 찾기</a></li>\n<li><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\">전체 코드</a></li>\n<li><a href=\"#%EF%B8%8F-code-classlanguage-texttransactionalcode\">⚠️ <code class=\"language-text\">@Transactional</code></a></li>\n<li><a href=\"#%EC%84%A4%EC%A0%95-%ED%8C%8C%EC%9D%BC\">설정 파일</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-jpa\">📌 스프링 데이터 JPA</a></p>\n<ul>\n<li><a href=\"#interface-1\">Interface</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-hello-005/"},"frontmatter":{"categories":"강의","title":"스프링 DB 접근 기술 - 스프링 입문 | 매일 1시간 👨🏻‍🏫 4일차, 5일차","date":"October 04, 2022"}},"next":{"fields":{"slug":"/spring-hello-004/"}},"previous":{"fields":{"slug":"/spring-hello-006/"}}},{"node":{"id":"b5b16207-22b2-5f83-8cce-11125d8eb62e","excerpt":"본 게시글은 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 강의를 듣고 정리했습니다. ☘️ 회원 관리 예제 - 웹 MVC 개발 📌 회원 웹 기능 - 홈 화면 추가 홈 화면을 추가해보자. 컨트롤러를 통해 홈 화면 html을 리턴할 것이므로 에 home.html을 만들어주자. 회원 가입과 회원 목록은 ~~/members/new 와 ~~/members로 이동하도록 연결해놨다. 아래에서 컨트롤러를 연결해주자. 그리고 컨트롤러에서 home을 리턴해주자. 그럼 viewResolver가 templates에서 같은 이름의 파일을 찾고 필요하면 처리를 하고 내보내겠죠? 어라라? 근데 이미  폴더에 을 추가해놔서 welcome page로 home에선 해당 파일이 나오지 않았던가? 하지만 스프링은 우선 컨트롤러를 찾고, 없으면 static에서 정적 파일을 찾는다. 이 경우 컨트롤러가 있으므로 정적 파일을 찾지 않는다. 📌 회원 웹 기능 - 등록 회원가입 페이지와 컨트롤러 회원…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%ED%9A%8C%EC%9B%90-%EA%B4%80%EB%A6%AC-%EC%98%88%EC%A0%9C---%EC%9B%B9-mvc-%EA%B0%9C%EB%B0%9C\">☘️ 회원 관리 예제 - 웹 MVC 개발</a></p>\n<ul>\n<li>\n<p><a href=\"#-%ED%9A%8C%EC%9B%90-%EC%9B%B9-%EA%B8%B0%EB%8A%A5---%ED%99%88-%ED%99%94%EB%A9%B4-%EC%B6%94%EA%B0%80\">📌 회원 웹 기능 - 홈 화면 추가</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EC%9B%90-%EC%9B%B9-%EA%B8%B0%EB%8A%A5---%EB%93%B1%EB%A1%9D\">📌 회원 웹 기능 - 등록</a></p>\n<ul>\n<li><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%ED%8E%98%EC%9D%B4%EC%A7%80%EC%99%80-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC\">회원가입 페이지와 컨트롤러</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EC%9B%90-%EC%9B%B9-%EA%B8%B0%EB%8A%A5---%EC%A1%B0%ED%9A%8C\">📌 회원 웹 기능 - 조회</a></p>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-hello-004/"},"frontmatter":{"categories":"강의","title":"회원 관리 예제 / 웹 MVC 개발 - 스프링 입문 | 매일 1시간 👨🏻‍🏫 4일차","date":"October 04, 2022"}},"next":{"fields":{"slug":"/spring-hello-003/"}},"previous":{"fields":{"slug":"/spring-hello-005/"}}},{"node":{"id":"f8af4420-8821-5c7c-a65a-c17a546eba92","excerpt":"본 게시글은 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 강의를 듣고 정리했습니다. ☘️ 스프링 빈과 의존 관계 이때까지 잘 만든 걸 화면이랑 붙여보자. 그러려면 Controller와 View Template이 필요하다. 그럼 Controller가 Service를 통해 조회, 가입 등등을 한다. 그렇다면 MemberController가 MemberService를 의존하게 된다. 이걸 스프링을 통해 스프링스럽게 해보자. 📌 컴포넌트 스캔과 자동 의존관계 설정  어노테이션을 통해 스프링이 시작될 때 스프링 컨테이너 통에 이 MemberController객체가 생성되어서 넣어진다. Spring Bean이 관리된다.  역시 하나 생성해놓고 여러 컨트롤러에서 공유해서 사용해도 된다. 따라서 스프링 컨테이너에 등록해두는 것이 더 좋다. (+ 부가적인 효과.. coming soon..) 생성자에 를 적어준다면 해당 빈이 생성될 때 스프링이 컨테이너에 있는 필요한 인자…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88%EA%B3%BC-%EC%9D%98%EC%A1%B4-%EA%B4%80%EA%B3%84\">☘️ 스프링 빈과 의존 관계</a></p>\n<ul>\n<li>\n<p><a href=\"#-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%8A%A4%EC%BA%94%EA%B3%BC-%EC%9E%90%EB%8F%99-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%84%A4%EC%A0%95\">📌 컴포넌트 스캔과 자동 의존관계 설정</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88%EC%9D%84-%EB%93%B1%EB%A1%9D%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">스프링 빈을 등록하는 방법</a></li>\n<li><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%8A%A4%EC%BA%94-%EC%9C%84%EC%B9%98\">컴포넌트 스캔 위치</a></li>\n<li><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%8A%94-%EC%8B%B1%EA%B8%80%ED%86%A4\">컴포넌트는 싱글톤</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%9E%90%EB%B0%94-%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%A7%81%EC%A0%91-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0\">📌 자바 코드로 직접 스프링 빈 등록하기</a></p>\n<ul>\n<li><a href=\"#configuration-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0\">Configuration 클래스 만들기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%B0%B8%EA%B3%A0\">📌 참고</a></p>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-hello-003/"},"frontmatter":{"categories":"강의","title":"스프링 빈과 의존관계 - 스프링 입문 | 매일 1시간 👨🏻‍🏫 3일차","date":"October 04, 2022"}},"next":{"fields":{"slug":"/spring-hello-002/"}},"previous":{"fields":{"slug":"/spring-hello-004/"}}},{"node":{"id":"444b6060-b30b-5d80-af37-40ee340cced5","excerpt":"본 게시글은 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 강의를 듣고 정리했습니다. ☘️ 회원 관리 예제 - 백엔드 개발 📌 비즈니스 요구사항 정리 정말 간단하게! 데이터: 회원ID, 이름 기능: 회원 등록, 조회 아직 데이터 저장소가 선정되지 않음(가상의 시나리오) 일반적인 웹 애플리케이션 계층 구조  컨트롤러: 웹 MVC의 컨트롤러 역할 서비스: 핵심 비즈니스 로직 구현 리포지토리: 데이터베이스에 접근, 도메인 객체를 DB에 저장하고 관리 도메인: 비즈니스 도메인 객체, 예) 회원, 주문, 쿠폰 등등 주로 데이터베이스에 저장하고 관리됨 실습 클래스 의존관계  아직 데이터 저장소가 선장되지 않았으므로 저장소를 우선 인터페이스로 구현 클래스를 변경할 수 있도록 설계한다. 일단은 구현체로 메모리 기반의 데이터 저장소를 먼저 구현하고, 나중에 구현체를 바꿔끼운다. 📌 회원 도메인과 리포지토리 작성과 테스트 회원 리포지토리 인터페이스 요즘은 null을 그대로 …","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%ED%9A%8C%EC%9B%90-%EA%B4%80%EB%A6%AC-%EC%98%88%EC%A0%9C---%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C\">☘️ 회원 관리 예제 - 백엔드 개발</a></p>\n<ul>\n<li>\n<p><a href=\"#-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EC%A0%95%EB%A6%AC\">📌 비즈니스 요구사항 정리</a></p>\n<ul>\n<li><a href=\"#%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%EC%9B%B9-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0\">일반적인 웹 애플리케이션 계층 구조</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84\">실습 클래스 의존관계</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EC%9B%90-%EB%8F%84%EB%A9%94%EC%9D%B8%EA%B3%BC-%EB%A6%AC%ED%8F%AC%EC%A7%80%ED%86%A0%EB%A6%AC-%EC%9E%91%EC%84%B1%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8\">📌 회원 도메인과 리포지토리 작성과 테스트</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BC%80%EC%9D%B4%EC%8A%A4-%EC%9E%91%EC%84%B1\">테스트 케이스 작성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EC%9B%90-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B0%9C%EB%B0%9C%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8\">📌 회원 서비스 개발과 테스트</a></p>\n<ul>\n<li><a href=\"#%ED%9A%8C%EC%9B%90-%EC%84%9C%EB%B9%84%EC%8A%A4\">회원 서비스</a></li>\n<li><a href=\"#%ED%9A%8C%EC%9B%90-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\">회원 서비스 테스트</a></li>\n<li><a href=\"#%EC%98%88%EC%99%B8-%ED%99%95%EC%9D%B8\">예외 확인</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-hello-002/"},"frontmatter":{"categories":"강의","title":"회원 관리 예제 / 백엔드 개발 - 스프링 입문 | 매일 1시간 👨🏻‍🏫 3일차","date":"October 03, 2022"}},"next":{"fields":{"slug":"/spring-hello-001/"}},"previous":{"fields":{"slug":"/spring-hello-003/"}}},{"node":{"id":"21671fb9-1e4c-5308-ae86-edf3a7b73f68","excerpt":"본 게시글은 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 강의를 듣고 정리했습니다. ☘️ 스프링 웹 개발 기초 웹을 개발한다는 건 크게 세 가지 경우가 있다. 정적 컨텐츠: 서버에서 뭐 하는 거 없이 그냥 파일 그대로 내보낸다. MVC와 템플릿 엔진: JSP같은 소위 템플릿 엔진. html을 동적으로 바꿔서 내보냄. 요즘은 이 패턴 API json 데이터 포맷으로 클라(안드, ios 등등)한테 데이터 넘겨주기. 서버끼리 통신 📌 정적 컨텐츠 스프링 부트 정적 컨텐츠 기능 스프링 부트는 정적 컨텐츠 기능을 기본적으로 제공한다. 에서 static content를 찾는다. 을 하면 기본적으로 정적 파일을 찾아서 그대로 반환해준다.  큰 개념을 설명하자면 대략 이렇다. 자세한 건 다음 강의에서.. 우선 요청이 들어오면, 내장 톰캣 서버가 요청을 받고 넘긴다. 그럼 스프링은 해당 이름의 컨트롤러를 먼저 찾는다. -> 컨트롤러 우선순위가 더 높다는 뜻 컨트롤러가 없…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%8A%A4%ED%94%84%EB%A7%81-%EC%9B%B9-%EA%B0%9C%EB%B0%9C-%EA%B8%B0%EC%B4%88\">☘️ 스프링 웹 개발 기초</a></p>\n<ul>\n<li>\n<p><a href=\"#-%EC%A0%95%EC%A0%81-%EC%BB%A8%ED%85%90%EC%B8%A0\">📌 정적 컨텐츠</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%A0%95%EC%A0%81-%EC%BB%A8%ED%85%90%EC%B8%A0-%EA%B8%B0%EB%8A%A5\">스프링 부트 정적 컨텐츠 기능</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-mvc%EC%99%80-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%97%94%EC%A7%84\">📌 MVC와 템플릿 엔진</a></p>\n<ul>\n<li><a href=\"#%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D\">동작 방식</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-api\">📌 API</a></p>\n<ul>\n<li><a href=\"#%EC%98%88%EC%8B%9C1---%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%9D%91%EB%8B%B5\">예시1 - 문자열 응답</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C2---json-%EC%9D%91%EB%8B%B5\">예시2 - JSON 응답</a></li>\n<li><a href=\"#%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D-1\">동작 방식</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-hello-001/"},"frontmatter":{"categories":"강의","title":"스프링 웹 개발 기초 - 스프링 입문 | 매일 1시간 👨🏻‍🏫 2일차","date":"October 03, 2022"}},"next":{"fields":{"slug":"/python-001/"}},"previous":{"fields":{"slug":"/spring-hello-002/"}}},{"node":{"id":"dce48c7a-e649-52e8-8de8-be81bedebe21","excerpt":"백준 18808번 스티커 붙이기를 풀다가 2차원 배열 회전을 해야 해서 찾아봤는데.. 다 를 쓰는데 처음에 이해가 안가서 정리해봤습니다. 📌 좌표 이용 회전 우선 배열을 오른쪽으로 90도 회전할 때, 방향이 어떻게 바뀌는 지를 봅시다.  기존 배열에서 열은 행이 되고, 행은 뒤집은 순서로 열이 되는 걸 볼 수 있습니다. 따라서 기존 배열에서 인덱스가 였다면, 회전한 배열에서 인덱스는 가 됩니다. 즉, 기존 배열에서 열이 n개 있었다면, 가 됩니다. 따라서 회전시키는 함수는 아래와 같습니다. 이 때 주의해야할 점은, 회전 배열을 채우기 위해 로 채울 때, 을 하면 안된다는 점입니다. 이런 식으로 만든 리스트는 한 리스트를 레퍼런스하고 있어서, 한 리스트의 내용이 바뀌면 다 같이 바뀌게 된다고 합니다. Python docs What has happened is that  is a one-element list containing an empty list, so all three ele…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#-%EC%A2%8C%ED%91%9C-%EC%9D%B4%EC%9A%A9-%ED%9A%8C%EC%A0%84\">📌 좌표 이용 회전</a></p>\n</li>\n<li>\n<p><a href=\"#-code-classlanguage-textlistzipmatrix-1code\">📌 <code class=\"language-text\">list(zip(*matrix[::-1]))</code></a></p>\n<ul>\n<li><a href=\"#code-classlanguage-textzipcode\"><code class=\"language-text\">zip()</code></a></li>\n<li><a href=\"#packing-unpacking-args\">packing, unpacking (*args)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%A0%84%EC%B9%98\">📌 전치</a></p>\n</li>\n<li>\n<p><a href=\"#-etc\">📌 etc</a></p>\n<ul>\n<li><a href=\"#unpacking-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-2%EC%B0%A8%EC%9B%90-%EB%B0%B0%EC%97%B4-%EC%98%88%EC%81%98%EA%B2%8C-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0\">unpacking(*) 이용해서 2차원 배열 예쁘게 출력하기</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/python-001/"},"frontmatter":{"categories":"Python","title":"파이썬으로 2차원 리스트 회전하기 / 그래서 list(zip(*matrix[::-1]))이 뭔데... | zip(), packing, unpacking (*)","date":"October 03, 2022"}},"next":{"fields":{"slug":"/os-003-deadlock/"}},"previous":{"fields":{"slug":"/spring-hello-001/"}}},{"node":{"id":"c8639ad2-17d5-5d8c-a1a4-a21a877caea6","excerpt":"📓 데드락(deadlock) | 교착 상태 시스템 내의 임계 구역(critical section)이 존재할 경우, 프로세스 간 상호 배제(mutual exclusion)를 보장해야 합니다. 이를 보장하기 위해 잠금(lock)을 사용하다보면 작업이 더 이상 진행되지 않는 교착상태(deadlock)에 빠지는 경우가 있습니다. 이 때 이 데드락은 무엇이고, 왜 발생하고, 어떻게 해결할까요? 📌 데드락이란? 두 개 이상의 프로세스가 다른 프로세스의 작업이 끝나기만 기다리며 작업을 더 이상 진행하지 못하는 상태입니다. 이 때, ‘더 이상 진행하지 못하는 상태’라는 이유로 과 헷갈리기 쉬우므로 주의해야합니다 starvation 작업을 해야 하는 프로세스가 프로세서(CPU)를 할당받지 못해 Ready 상태에서 더 이상 진행하지 못하는 상태입니다. 스케줄링에 대해 공부하다가 나오는 개념입니다. starvation은 운영체제가 잘못된 정책을 사용하여 특정 프로세스의 작업이 지연되는 문제고, dea…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#-%EB%8D%B0%EB%93%9C%EB%9D%BDdeadlock--%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C\">📓 데드락(deadlock) | 교착 상태</a></p>\n<ul>\n<li>\n<p><a href=\"#-%EB%8D%B0%EB%93%9C%EB%9D%BD%EC%9D%B4%EB%9E%80\">📌 데드락이란?</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%8D%B0%EB%93%9C%EB%9D%BD%EC%9D%B4-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">📌 데드락이 발생하는 경우</a></p>\n<ul>\n<li><a href=\"#1-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%9E%90%EC%9B%90%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">1. 시스템 자원을 사용하는 경우</a></li>\n<li><a href=\"#2-%EA%B3%B5%EC%9C%A0-%EB%B3%80%EC%88%98\">2. 공유 변수</a></li>\n<li><a href=\"#3-%EC%9D%91%EC%9A%A9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8\">3. 응용 프로그램</a></li>\n<li><a href=\"#%EC%8B%9D%EC%82%AC%ED%95%98%EB%8A%94-%EC%B2%A0%ED%95%99%EC%9E%90-%EB%AC%B8%EC%A0%9C-dining-philosophers\">식사하는 철학자 문제 (Dining Philosophers)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#--%EB%8D%B0%EB%93%9C%EB%9D%BD-%EB%B0%9C%EC%83%9D-u%ED%95%84%EC%9A%94u%EC%A1%B0%EA%B1%B4-4%EA%B0%80%EC%A7%80\">📌  데드락 발생 <u><strong>필요</strong></u>조건 4가지</a></p>\n<ul>\n<li><a href=\"#1-%EC%83%81%ED%98%B8-%EB%B0%B0%EC%A0%9C-code-classlanguage-textmutual-exclusioncode\">1. 상호 배제 <code class=\"language-text\">Mutual exclusion</code></a></li>\n<li><a href=\"#2-%EB%B9%84%EC%84%A0%EC%A0%90-code-classlanguage-textno-preemptioncode\">2. 비선점 <code class=\"language-text\">No preemption</code></a></li>\n<li><a href=\"#3-%EC%A0%90%EC%9C%A0%EC%99%80-%EB%8C%80%EA%B8%B0-code-classlanguage-texthold-and-waitcode\">3. 점유와 대기 <code class=\"language-text\">Hold-and-wait</code></a></li>\n<li><a href=\"#4-%EC%9B%90%ED%98%95-%EB%8C%80%EA%B8%B0-code-classlanguage-textcircular-waitcode\">4. 원형 대기 <code class=\"language-text\">Circular wait</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%8D%B0%EB%93%9C%EB%9D%BD-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\">📓 데드락 해결 방법</a></p>\n<ul>\n<li>\n<p><a href=\"#-%EC%98%88%EB%B0%A9%ED%95%98%EA%B8%B0-prevention\">📌 예방하기 (Prevention)</a></p>\n<ul>\n<li><a href=\"#1-%EC%83%81%ED%98%B8-%EB%B0%B0%EC%A0%9C-%EC%98%88%EB%B0%A9\">1. 상호 배제 예방</a></li>\n<li><a href=\"#2-%EB%B9%84%EC%84%A0%EC%A0%90-%EC%98%88%EB%B0%A9\">2. 비선점 예방</a></li>\n<li><a href=\"#3-%EC%A0%90%EC%9C%A0%EC%99%80-%EB%8C%80%EA%B8%B0-%EC%98%88%EB%B0%A9\">3. 점유와 대기 예방</a></li>\n<li><a href=\"#4-%EC%9B%90%ED%98%95-%EB%8C%80%EA%B8%B0-%EC%98%88%EB%B0%A9\">4. 원형 대기 예방</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#--%ED%9A%8C%ED%94%BC%ED%95%98%EA%B8%B0-avoidance\">📌  회피하기 (Avoidance)</a></p>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\">문제점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B2%80%EC%B6%9C-%EB%B0%8F-%ED%9A%8C%EB%B3%B5%ED%95%98%EA%B8%B0\">📌 검출 및 회복하기</a></p>\n<ul>\n<li><a href=\"#%EA%B2%80%EC%B6%9C\">검출</a></li>\n<li><a href=\"#%ED%9A%8C%EB%B3%B5\">회복</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/os-003-deadlock/"},"frontmatter":{"categories":"운영체제","title":"데드락(deadlock) | 교착 상태","date":"September 27, 2022"}},"next":{"fields":{"slug":"/network-001-handshake/"}},"previous":{"fields":{"slug":"/python-001/"}}},{"node":{"id":"d7fef937-27ec-5b6b-89a9-c233c9eed463","excerpt":"TCP Handshake 왜 그냥 보내는 게 아니고 handshake 과정을 거칠까요? 그럼 우선 TCP 통신이란 뭘까요? TCP는 unreliable network에서 reliable한 전송을 보장할 수 있게 하는 프로토콜입니다. 그렇다면 handshake는 reliable한 전송을 위해 필요하다고 생각해볼 수 있습니다. Q. 굳이 reliable한 전송이 필요가 없다면, handshake를 통해 연결 성립을 해야할까요? UDP UDP의 경우는 reliable한 전송을 보장하지 않습니다. 따라서 UDP는 통신을 하려는 상대방이 지금 메세지를 받을 수 있는 지 없는 지를 확인하지 않고 그냥 보냅니다. 그래서 handshake 과정을 통해 상대방의 상황이 어떤 지, 준비가 되어 있는 지 확인할 필요가 없기 때문에, handshake를 거치지 않습니다. TCP:  그렇다면 handshake가 뭐길래 TCP는 reliable한 전송을 보장할 수 있는 걸까요? 일단 과정을 살펴보면 알겠죠…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#tcp-handshake\">TCP Handshake</a></p>\n</li>\n<li>\n<p><a href=\"#udp\">UDP</a></p>\n</li>\n<li>\n<p><a href=\"#tcp-code-classlanguage-texttransmission-control-protocolcode\">TCP: <code class=\"language-text\">Transmission Control Protocol</code></a></p>\n<ul>\n<li><a href=\"#3-way-handshake-%EC%97%B0%EA%B2%B0-%EC%84%B1%EB%A6%BDconnection-establishment\">3 way handshake: 연결 성립(Connection Establishment)</a></li>\n<li><a href=\"#4-way-handshake-%EC%97%B0%EA%B2%B0-%ED%95%B4%EC%A0%9Cconnection-termination\">4 way handshake: 연결 해제(Connection Termination)</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/network-001-handshake/"},"frontmatter":{"categories":"네트워크","title":"TCP 3 way handshake & 4 way handshake","date":"September 21, 2022"}},"next":{"fields":{"slug":"/til-003/"}},"previous":{"fields":{"slug":"/os-003-deadlock/"}}},{"node":{"id":"260e786f-ac61-54e7-8587-a2a60f7ee91b","excerpt":"리스트 : 원하는 형태로 출력하기 (iterable) Return a string which is the concatenation of the strings in iterable. A  will be raised if there are any non-string values in iterable, including  objects. The separator between elements is the string providing this method. python docs 인자로 iterable한 string을 넣으면 join시켜서 문자열을 만들어준다. int형 리스트를 원하는 형태로 join해서 출력해보자. 이 때 string join을 해야하므로 int형을 str형으로 변환해줘야한다. 따라서 리스트의 요소들을 로 형변환 해주기 위해 map을 활용하자. 은 리스트(포함 iterable한 객체)의 요소를 지정된 함수로 처리해준다. 참고 | 시퀀스 객체와 반복 가능한 객체의 차이 ‘…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%A6%AC%EC%8A%A4%ED%8A%B8-code-classlanguage-textjoincode-%EC%9B%90%ED%95%98%EB%8A%94-%ED%98%95%ED%83%9C%EB%A1%9C-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0\">리스트 <code class=\"language-text\">join</code>: 원하는 형태로 출력하기</a></p>\n</li>\n<li>\n<p><a href=\"#queue\">Queue</a></p>\n<ul>\n<li><a href=\"#list-%ED%99%9C%EC%9A%A9\">list 활용</a></li>\n<li><a href=\"#code-classlanguage-textpopindexcode\"><code class=\"language-text\">pop(index)</code>?</a></li>\n<li><a href=\"#code-classlanguage-textremovevaluecode\"><code class=\"language-text\">remove(value)</code></a></li>\n<li><a href=\"#collections-%EB%AA%A8%EB%93%88%EC%9D%98-deque\">collections 모듈의 deque</a></li>\n<li><a href=\"#queue-%EB%AA%A8%EB%93%88%EC%9D%98-queue\">queue 모듈의 Queue</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#stack\">Stack</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC\">딕셔너리</a></p>\n<ul>\n<li>\n<p><a href=\"#code-classlanguage-textdelcode-%EC%82%AD%EC%A0%9C\"><code class=\"language-text\">del</code> 삭제</a></p>\n<ul>\n<li><a href=\"#list\">list</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%A3%BC%EC%9D%98\">주의</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%81%EC%A2%85-%ED%95%A8%EC%88%98\">각종 함수</a></p>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/til-003/"},"frontmatter":{"categories":"TIL Python","title":"파이썬 문법 정리 | TIL ＃3","date":"September 13, 2022"}},"next":{"fields":{"slug":"/os-002-pcb/"}},"previous":{"fields":{"slug":"/network-001-handshake/"}}},{"node":{"id":"341cc23e-1440-5f12-80f1-712e35d158bf","excerpt":"프로세스와 스레드 프로세스의 개요 프로세스 제어 블록과 문맥 교환 프로세스의 연산 스레드 [심화학습] 동적 할당 영역과 시스템 호출 PCB: Process Control Block 📌 프로세스 제어 블록 프로세스의 개요에서 프로세스를 실행하는 데 메모리만 필요한 것이 아니고, 관리하기 위한 자료 구조로 PCB가 필요하다고 했죠? PCB에 대해 더 알아봅시다. 프로세스를  Task라고도 하는 것처럼, PCB 역시 TCB라고도 부릅니다. ☘️ PCB 구성 포인터 프로세스의 개요에서 프로세스의 상태에 따라 큐로 운영된다고 했습니다. 이 때 queue에서 PCB를 연결할 때 포인터를 사용합니다. 프로세스 상태 Run, Ready, Waiting 등의 상태 프로세스 ID 프로세스를 구별하기 위한 구분자 프로그램 우선순위 CPU Scheduling이 일어나서 스케줄러가 준비 상태에 있는 프로세스 중 실행 상태로 옮겨야 할 프로세스를 어떻게 선택할까요? 프로세스 우선순위를 기준으로 삼아서, 높은…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#pcb-process-control-block\">PCB: Process Control Block</a></p>\n<ul>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4-%EB%B8%94%EB%A1%9D\">📌 프로세스 제어 블록</a></p>\n<ul>\n<li><a href=\"#%EF%B8%8F-pcb-%EA%B5%AC%EC%84%B1\">☘️ PCB 구성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-context-switching\">📌 Context Switching</a></p>\n<ul>\n<li><a href=\"#%EF%B8%8F-context-switching%EB%AC%B8%EB%A7%A5-%EA%B5%90%ED%99%98%EC%9D%B4%EB%9E%80\">☘️ Context Switching(문맥 교환)이란</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%96%B8%EC%A0%9C-%EC%9D%BC%EC%96%B4%EB%82%A0%EA%B9%8C\">☘️ 언제 일어날까?</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%A0%88%EC%B0%A8\">☘️ 절차</a></li>\n<li><a href=\"#%EF%B8%8F--%EB%8B%A8%EC%A0%90\">☘️  단점</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/os-002-pcb/"},"frontmatter":{"categories":"운영체제","title":"프로세스 제어 블록과 문맥 교환(PCB & Context Switching) | 프로세스와 스레드","date":"September 12, 2022"}},"next":{"fields":{"slug":"/os-001-process/"}},"previous":{"fields":{"slug":"/til-003/"}}},{"node":{"id":"d9ca62b2-ac7b-5888-856d-68dd0821fc56","excerpt":"프로세스와 스레드 프로세스의 개요 프로세스 제어 블록과 문맥 교환 프로세스의 연산 스레드 [심화학습] 동적 할당 영역과 시스템 호출 프로세스의 개요 📌 프로그램과 프로세스 운영체제에서 는 하나의 작업단위입니다. (그래서 프로세스를 라고도 부릅니다.) 사용자가 마우스를 더블클릭하여 을 실행하면 그 프로그램이 프로세스가 되는 겁니다. 그럼 정확히 둘의 차이는 뭘까요? 정적인 상태 vs. 동적인 상태 프로그램은 저장장치에 보관되어 있습니다. 그리고 프로그램이 실행된다는 건 프로그램 코드가 에 올라와서 작업이 진행되는 것입니다. 그리고 이렇게 메모리에 올라온 것이 프로세스라고 할 수 있습니다. 프로그램은 작업 절차를 쭉 적어놓은 것이고, 프로세스는 그 작성된 작업 절차를 실제로 실행하는 것입니다. 예를 들자면, 요리할 때 레시피를 보고 레시피를 순서대로 실행하면서 요리를 하는 것과 같습니다. 이 때 레시피가 프로그램이고, 요리를 하는 것은 프로세스가 명령을 실행하는 것이라고 할 수 있습니…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EA%B0%9C%EC%9A%94\">프로세스의 개요</a></p>\n<ul>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B3%BC-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\">📌 프로그램과 프로세스</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%97%90%EC%84%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EB%A1%9C\">📌 프로그램에서 프로세스로</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C\">📌 프로세스의 상태</a></p>\n<ul>\n<li><a href=\"#-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C-%EC%A2%85%EB%A5%98\">🏃 프로세스의 상태 종류</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/os-001-process/"},"frontmatter":{"categories":"운영체제","title":"프로세스의 개요 | 프로세스와 스레드","date":"September 11, 2022"}},"next":{"fields":{"slug":"/til-002/"}},"previous":{"fields":{"slug":"/os-002-pcb/"}}},{"node":{"id":"c2d6ce1f-d11b-5016-bd70-24c6b5ba1c21","excerpt":"파이썬 문법 정리 : 문자열 검색 사용법 찾는 문자가 존재하면 index 반환 없으면 -1 반환 이 때 인덱스는 string의 인덱스를 뜻하는 것 시간 복잡도는 정확하게 나온 걸 찾지 못해서 모르겠지만 C++ 의 경우 string의 길이가  n, substring의 길이가 m이면  이므로 같을 것 같다.  operator 근데 나는 문자열이 있는 지 아닌지를 찾으려고 find를 썼는데, 파이썬 docs를 보니까 substring의 position을 찾으려고 하는 게 아니면  operator를 쓰라고 한다. (근데 백준에서 봤을 때 시간 차이는 얼마 안난다)  입력받기 엔터로 구분된 입력 받기 파이썬에서 언더스코어의 의미는 인터프리터에서 마지막 값 저장할 때 don’t care: 값 무시하고 싶을 때 특별한 의미의 네이밍을 할 때 예를 들어 클래스의 private 변수들에 맨 앞에 붙여서 사용 단 진정한 private를 지원하진 않으므로 직접 가져다 쓰면 가능 숫자의 자릿수 구분자(…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%AC%B8%EB%B2%95-%EC%A0%95%EB%A6%AC\">파이썬 문법 정리</a></p>\n<ul>\n<li>\n<p><a href=\"#code-classlanguage-textfindcode-%EB%AC%B8%EC%9E%90%EC%97%B4-%EA%B2%80%EC%83%89\"><code class=\"language-text\">find</code>: 문자열 검색</a></p>\n<ul>\n<li><a href=\"#%EC%82%AC%EC%9A%A9%EB%B2%95\">사용법</a></li>\n<li><a href=\"#code-classlanguage-textincode-operator\"><code class=\"language-text\">in</code> operator</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9E%85%EB%A0%A5%EB%B0%9B%EA%B8%B0\">입력받기</a></p>\n<ul>\n<li><a href=\"#%EC%97%94%ED%84%B0%EB%A1%9C-%EA%B5%AC%EB%B6%84%EB%90%9C-%EC%9E%85%EB%A0%A5-%EB%B0%9B%EA%B8%B0\">엔터로 구분된 입력 받기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9E%85%EB%A0%A5-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EB%B0%9B%EA%B8%B0\">입력 빠르게 받기</a></p>\n<ul>\n<li><a href=\"#code-classlanguage-textsysstdinreadlinecode\"><code class=\"language-text\">sys.stdin.readline()</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/til-002/"},"frontmatter":{"categories":"TIL Python","title":"파이썬 문법 정리 | TIL ＃2","date":"September 09, 2022"}},"next":{"fields":{"slug":"/til-001/"}},"previous":{"fields":{"slug":"/os-001-process/"}}},{"node":{"id":"2fd68ffa-311a-5003-8277-04cfb6a5f88d","excerpt":"Synchronous vs. Non-blocking? 교수님께서 Synchronous의 반대가 Nonblocking처럼 설명하셨는데 둘은 반대라기보다는 다른 느낌으로 알고 있어서 한 번 찾아봤다. 동기 vs 비동기 (feat. blocking vs non-blocking) [10분 테코톡] 🎧 우의 Block vs Non-Block & Sync vs Async Blocking vs. Non-blocking  에 초점을 둔다. 예를 들어 함수 A에서 함수 B를 call했을 때 Blocking: B는 할 일을 다 마쳐야 A에게 제어권을 준다. Non-blocking: B는 할 일을 마치지 않았어도 A에게 제어권을 넘겨준다. 따라서 Blocking이라면 A는 다른 일을 못하고 대기해야 한다. Synchronous vs. Asynchronous 를 처리하는 쪽에 초점을 둔다. 예를 들어 함수 A에서 함수 B를 call했을 때 Synchronous: A는 함수 B가 완료 했는 지를 계속 체…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#synchronous-vs-non-blocking\">Synchronous vs. Non-blocking?</a></p>\n<ul>\n<li><a href=\"#blocking-vs-non-blocking\">Blocking vs. Non-blocking</a></li>\n<li><a href=\"#synchronous-vs-asynchronous\">Synchronous vs. Asynchronous</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#python-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95%EB%93%A4\">Python 기본 문법들</a></p>\n</li>\n<li>\n<p><a href=\"#naming-convention\">Naming convention</a></p>\n<ul>\n<li>\n<p><a href=\"#1-%EC%9E%85%EB%A0%A5-%EB%B0%9B%EA%B8%B0\">1. 입력 받기</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EB%B0%98%EB%B3%B5%EB%AC%B8\">2. 반복문</a></p>\n</li>\n<li>\n<p><a href=\"#3-%EB%AC%B8%EC%9E%90\">3. 문자</a></p>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%9E%90-%EF%B8%8F-%EC%95%84%EC%8A%A4%ED%82%A4%EC%BD%94%EB%93%9C\">문자 ↔️ 아스키코드</a></li>\n<li><a href=\"#%EB%AC%B8%EC%9E%90-vs-%EC%88%AB%EC%9E%90\">문자 vs. 숫자</a></li>\n<li><a href=\"#%EC%9E%90%EB%A3%8C%ED%98%95-%ED%81%AC%EA%B8%B0\">자료형 크기?</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%9E%90%EB%A5%B4%EA%B8%B0slicing\">문자열 자르기(Slicing)</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A0%95%EB%A0%AC\">정렬</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%B9%84%EA%B5%90%EC%9E%90-cmp\">비교자 cmp</a></p>\n<ul>\n<li><a href=\"#python3\">Python3</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#key-%ED%95%A8%EC%88%98-%EB%84%A3%EC%96%B4%EC%84%9C-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0\">Key 함수 넣어서 정렬하기</a></p>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/til-001/"},"frontmatter":{"categories":"TIL Python","title":"Synchronous vs. Non-blocking? / 파이썬 기본 문법 정리 | TIL ＃1","date":"September 08, 2022"}},"next":{"fields":{"slug":"/java-001/"}},"previous":{"fields":{"slug":"/til-002/"}}},{"node":{"id":"85d45375-05d5-5ae3-97e9-88a66817e5e7","excerpt":"을 설정해보자 실행 시 cp 지정해주거나 MANIFEST 파일 작성하거나.. 다 뭔가 잘못했는 지 안되다가 아래 방법으로 됐다! 1. Main Class 지정 우선 라이브러리 경로를 추가하기 전에 Main Class를 지정했는 지 확인해보자. 지정해주지 않으면 Main을 못찾는 에러가 날 수 있다. 2. 라이브러리 경로를 추가 만약 라이브러리 파일들이 있는 경로가  폴더라고 해보자. 그러면 아래와 같이 추가하면 된다 외에도 다양한 설정이 있다. 자세한 내용은 gradle docs 참고 3. runtime class path 지정 2번까지만 진행하면 로 빌드는 되지만, 그 후 로 실행 시에 라이브러리의 클래스들을 읽지 못하는 문제가 발생한다. 따라서 class path가 이상한 것 같아서 해당 내용으로 찾다 보니 아래와 같이 추가하면 됐다. 이 때 원래는 만 지정해주면 되는 것 같은데.. 나는  오류가 발생했고, 부분을 추가했더니 해결됐다. 4. 실행해보자! 야호~! 을 설정해보자 …","tableOfContents":"<ul>\n<li>\n<p><a href=\"#code-classlanguage-textbuildgradlecode%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%B4%EB%B3%B4%EC%9E%90\"><code class=\"language-text\">build.gradle</code>을 설정해보자</a></p>\n<ul>\n<li><a href=\"#1-main-class-%EC%A7%80%EC%A0%95\">1. Main Class 지정</a></li>\n<li><a href=\"#2-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EA%B2%BD%EB%A1%9C%EB%A5%BC-%EC%B6%94%EA%B0%80\">2. 라이브러리 경로를 추가</a></li>\n<li><a href=\"#3-runtime-class-path-%EC%A7%80%EC%A0%95\">3. runtime class path 지정</a></li>\n<li><a href=\"#4-%EC%8B%A4%ED%96%89%ED%95%B4%EB%B3%B4%EC%9E%90\">4. 실행해보자!</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/java-001/"},"frontmatter":{"categories":"Java","title":"gradle로 빌드 & 실행 시에 라이브러리(jar파일) 포함하기","date":"June 19, 2022"}},"next":null,"previous":{"fields":{"slug":"/til-001/"}}}],"categories":["All","강의","도서","Python","운영체제","네트워크","TIL","Java"]}},"staticQueryHashes":["1956554647","2938748437","3454833782"]}