{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/강의","result":{"pageContext":{"currentCategory":"강의","categories":["All","강의","도서","Python","운영체제","네트워크","TIL","Java"],"edges":[{"node":{"id":"79da52e7-0186-5fa8-aa41-3b282b617451","excerpt":"본 게시글은 스프링 핵심 원리 - 기본편 강의를 듣고 정리했습니다. ☘️ 싱글톤 컨테이너 ‘싱글톤 패턴’이라고 말하는 그 싱글톤이다! 객체가 JVM 안에 딱 하나 있는 것. 📌 웹 애플리케이션과 싱글톤 대부분의 스프링 애플리케이션은 웹 애플리케이션이다. (데몬, 배치 등 다른 개발도 얼마든지 할 수 있다.) 그런데 웹 애플리케이션은 보통 여러 고객이 동시에 요청을 한다. 우리가 지금 만든 Bean들은 어떻게 동작을 할까?  우린 지금 요청이 올 때마다 객체를 새로 만들고 있다! 이런 식으로 계속 생성하는 건 말이 안된다. 테스트 코드: 실제로 테스트해봐도 둘은 다른 객체다. 따라서 해결방안은 해당 객체가 딱 1개만 생성되고, 공유하도록 설계하면 된다. ➡️  📌 싱글톤 패턴 싱글톤 패턴을 적용한 예제 코드를 보자. static 영역에 객체 instance를 미리 하나 생성해서 올려둔다. (자바가 뜰 때) 이 객체 인스턴스가 필요하면 오직 getInstance() 메서드를 통해서만 조회…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%8B%B1%EA%B8%80%ED%86%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\">☘️ 싱글톤 컨테이너</a></p>\n<ul>\n<li>\n<p><a href=\"#-%EC%9B%B9-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EA%B3%BC-%EC%8B%B1%EA%B8%80%ED%86%A4\">📌 웹 애플리케이션과 싱글톤</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4\">📌 싱글톤 패턴</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%8B%B1%EA%B8%80%ED%86%A4-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%8A%A4%ED%94%84%EB%A7%81-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\">📌 싱글톤 컨테이너 (스프링 컨테이너)</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%8B%B1%EA%B8%80%ED%86%A4-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%A3%BC%EC%9D%98%EC%A0%90-\">📌 싱글톤 방식의 주의점 ✨</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88%EC%9D%80-%ED%95%AD%EC%83%81-code-classlanguage-text%EB%AC%B4%EC%83%81%ED%83%9Cstatelesscode%EB%A1%9C-%EC%84%A4%EA%B3%84%ED%95%98%EA%B8%B0\">스프링 빈은 항상 <code class=\"language-text\">무상태(stateless)</code>로 설계하기!</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-code-classlanguage-textconfigurationcode%EA%B3%BC-%EC%8B%B1%EA%B8%80%ED%86%A4\">📌 <code class=\"language-text\">@Configuration</code>과 싱글톤</a></p>\n</li>\n<li>\n<p><a href=\"#-code-classlanguage-textconfigurationcode%EA%B3%BC-%EB%B0%94%EC%9D%B4%ED%8A%B8%EC%BD%94%EB%93%9C-%EC%A1%B0%EC%9E%91%EC%9D%98-%EB%A7%88%EB%B2%95\">📌 <code class=\"language-text\">@Configuration</code>과 바이트코드 조작의 마법</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%A0%95%EB%A6%AC\">📌 정리</a></p>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-core-basic-005/"},"frontmatter":{"categories":"강의","title":"싱글톤 컨테이너 - 스프링 핵심 원리 기본편 05","date":"October 10, 2022"}},"next":{"fields":{"slug":"/spring-core-basic-004/"}},"previous":null},{"node":{"id":"1a0fe530-96cb-5f28-af44-96c8b6081f4c","excerpt":"본 게시글은 스프링 핵심 원리 - 기본편 강의를 듣고 정리했습니다. ☘️ 스프링 컨테이너와 스프링 빈 📌 스프링 컨테이너 생성 그 전에 스프링 컨테이너를 생성하던 걸 생각해보자.  를 스프링 컨테이너라 한다.  는 인터페이스이다. 스프링 컨테이너는 XML을 기반으로 만들 수 있고, 애노테이션 기반의 자바 설정 클래스로 만들 수 있다. 직전에 AppConfig 를 사용했던 방식이 애노테이션 기반의 자바 설정 클래스로 스프링 컨테이너를 만든 것이다. 따라서 구현체로 를 자바 설정 클래스를 기반으로 스프링 컨테이너( ApplicationContext )를 만들었다. 더 정확히는 스프링 컨테이너를 부를 때  ,  로 구분해서 이야기한다. 가 좀 더 위에 있고, 는 유틸리티성으로 이것 저것 추가된 것이다. BeanFactory 를 직접 사용하는 경우는 거의 없으므로 일반적으로 ApplicationContext 를 스프링 컨테이너라 한다. 생성 과정 컨테이너 생성 컨테이너 생성 시에 구성 정보…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%8A%A4%ED%94%84%EB%A7%81-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%99%80-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88\">☘️ 스프링 컨테이너와 스프링 빈</a></p>\n<ul>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1\">📌 스프링 컨테이너 생성</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%97%90-%EB%93%B1%EB%A1%9D%EB%90%9C-%EB%AA%A8%EB%93%A0-%EB%B9%88-%EC%A1%B0%ED%9A%8C\">📌 컨테이너에 등록된 모든 빈 조회</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88-%EC%A1%B0%ED%9A%8C---%EA%B8%B0%EB%B3%B8\">📌 스프링 빈 조회 - 기본</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88-%EC%A1%B0%ED%9A%8C---%EB%8F%99%EC%9D%BC%ED%95%9C-%ED%83%80%EC%9E%85%EC%9D%B4-%EB%91%98-%EC%9D%B4%EC%83%81\">📌 스프링 빈 조회 - 동일한 타입이 둘 이상</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88-%EC%A1%B0%ED%9A%8C---%EC%83%81%EC%86%8D-%EA%B4%80%EA%B3%84-\">📌 스프링 빈 조회 - 상속 관계 ✨✨✨</a></p>\n</li>\n<li>\n<p><a href=\"#-beanfactory%EC%99%80-applicationcontext\">📌 BeanFactory와 ApplicationContext</a></p>\n<ul>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%8B%A4%EC%96%91%ED%95%9C-%EC%84%A4%EC%A0%95-%ED%98%95%EC%8B%9D-%EC%A7%80%EC%9B%90---%EC%9E%90%EB%B0%94-%EC%BD%94%EB%93%9C-xml\">📌 다양한 설정 형식 지원 - 자바 코드, XML</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88-%EC%84%A4%EC%A0%95-%EB%A9%94%ED%83%80-%EC%A0%95%EB%B3%B4---beandefinition\">📌 스프링 빈 설정 메타 정보 - BeanDefinition</a></p>\n<ul>\n<li><a href=\"#%EC%A0%95%EB%A6%AC-1\">정리</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-core-basic-004/"},"frontmatter":{"categories":"강의","title":"스프링 컨테이너와 스프링 빈 - 스프링 핵심 원리 기본편 04","date":"October 08, 2022"}},"next":{"fields":{"slug":"/spring-core-basic-003/"}},"previous":{"fields":{"slug":"/spring-core-basic-005/"}}},{"node":{"id":"38b9189e-0133-55a7-b6b0-936a28f05241","excerpt":"본 게시글은 스프링 핵심 원리 - 기본편 강의를 듣고 정리했습니다. ☘️ 스프링 핵심 원리 이해2 - 객체 지향 원리 적용 📌 새로운 할인 정책 개발 기획자가 정률 할인 정책으로 변경해달라고 했다. 하지만 우린 유연한 설계가 가능하도록 인터페이스를 이용해서 객체지향 설계 원칙을 준수했으므로 문제가 없다! 과연 그럴 지 한  번 해보자. 단축키 : 테스트 생성  할인과 관련된 부분을 잘 떼어 놨기 때문에 할인 부분만 떼서 테스트를 할 수 있다!  성공 테스트만큼 실패 테스트도 중요하다. 📌 새로운 할인 정책 적용과 문제점 이제 위에서 만든 를 실제로 적용해보자. 어라라? 근데 할인 정책을 변경하려면 클라이언트인 코드를 고쳐야 한다. 문제점 그렇다. 사실 OCP, DIP를 지킨 것 같았지만 아니다. DIP -> 인터페이스에만 의존하고 있는가? 아니다. 구체 클래스에도 의존하고 있다. OCP -> 클라이언트를 변경하지 않고 확장할 수 있는가? 아니다. 클라이언트 코드를 변경해야 한다. 의…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EC%9D%B4%ED%95%B42---%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%9B%90%EB%A6%AC-%EC%A0%81%EC%9A%A9\">☘️ 스프링 핵심 원리 이해2 - 객체 지향 원리 적용</a></p>\n<ul>\n<li>\n<p><a href=\"#-%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%95%A0%EC%9D%B8-%EC%A0%95%EC%B1%85-%EA%B0%9C%EB%B0%9C\">📌 새로운 할인 정책 개발</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%95%A0%EC%9D%B8-%EC%A0%95%EC%B1%85-%EC%A0%81%EC%9A%A9%EA%B3%BC-%EB%AC%B8%EC%A0%9C%EC%A0%90\">📌 새로운 할인 정책 적용과 문제점</a></p>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\">문제점</a></li>\n<li><a href=\"#%ED%95%B4%EA%B2%B0\">해결?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B4%80%EC%8B%AC%EC%82%AC%EC%9D%98-%EB%B6%84%EB%A6%AC\">📌 관심사의 분리</a></p>\n<ul>\n<li><a href=\"#%EA%B4%80%EC%8B%AC%EC%82%AC%EB%A5%BC-%EB%B6%84%EB%A6%AC%ED%95%98%EC%9E%90\">관심사를 분리하자</a></li>\n<li><a href=\"#code-classlanguage-textappconfigcode-%EB%93%B1%EC%9E%A5\"><code class=\"language-text\">AppConfig</code> 등장</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-appconfig-%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81\">📌 AppConfig 리팩터링</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%83%88%EB%A1%9C%EC%9A%B4-%EA%B5%AC%EC%A1%B0%EC%99%80-%ED%95%A0%EC%9D%B8-%EC%A0%95%EC%B1%85-%EC%A0%81%EC%9A%A9\">📌 새로운 구조와 할인 정책 적용</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%A2%8B%EC%9D%80-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%9D%98-5%EA%B0%80%EC%A7%80-%EC%9B%90%EC%B9%99%EC%9D%98-%EC%A0%81%EC%9A%A9\">📌 좋은 객체 지향 설계의 5가지 원칙의 적용</a></p>\n</li>\n<li>\n<p><a href=\"#-ioc-di-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\">📌 IoC, DI, 그리고 컨테이너</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81%EC%9C%BC%EB%A1%9C-%EC%A0%84%ED%99%98%ED%95%98%EA%B8%B0\">📌 스프링으로 전환하기</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\">스프링 컨테이너</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-core-basic-003/"},"frontmatter":{"categories":"강의","title":"객체 지향 원리 적용 - 스프링 핵심 원리 기본편 03","date":"October 08, 2022"}},"next":{"fields":{"slug":"/spring-core-basic-002/"}},"previous":{"fields":{"slug":"/spring-core-basic-004/"}}},{"node":{"id":"4ba630a1-8d66-584c-8256-51a431cfe728","excerpt":"본 게시글은 스프링 핵심 원리 - 기본편 강의를 듣고 정리했습니다. ☘️ 스프링 핵심 원리 이해1 - 예제 만들기 그럼 인터페이스(역할)와 구현하는 객체를 나누어서 개발을 해보자 📌 프로젝트 생성 순수 자바로만 할거라 스프링을 쓰진 않지만 세팅할 때 스프링부트를 이용하면 편해서 일단 스프링부트로 생성하자 -> 스프링 부트 스타터 스프링 부트 버전에서 snapshot, m5 이런 건 안정화가 아직 안된 것이니 가장 최신 안정화가 된 걸 선택하자. (현재 시점 2.7.4) artifact가 프로젝트 빌드명이 된다. 자바 11 dependency는 선택하지 않는다. 생성 후 인텔리제이에서 열어주자. 이 때 Preference>Build>Build Tools>Gradle에서 Build and run, Run tests를 gradle이 아닌 intellij를 사용하도록 변경하자. 이게 좀 더 빠르다. 📌 비즈니스 요구사항 역할과 구현 구분하기! 우선 요구사항은 3가지로 , , 이 있다. 회원…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EC%9D%B4%ED%95%B41---%EC%98%88%EC%A0%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\">☘️ 스프링 핵심 원리 이해1 - 예제 만들기</a></p>\n<ul>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\">📌 프로젝트 생성</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD\">📌 비즈니스 요구사항</a></p>\n<ul>\n<li><a href=\"#%ED%9A%8C%EC%9B%90\">회원</a></li>\n<li><a href=\"#%EC%A3%BC%EB%AC%B8%EA%B3%BC-%ED%95%A0%EC%9D%B8-%EC%A0%95%EC%B1%85\">주문과 할인 정책</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EC%9B%90-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%84%A4%EA%B3%84\">📌 회원 도메인 설계</a></p>\n<ul>\n<li><a href=\"#%ED%9A%8C%EC%9B%90-%EB%8F%84%EB%A9%94%EC%9D%B8-%ED%98%91%EB%A0%A5-%EA%B4%80%EA%B3%84\">회원 도메인 협력 관계</a></li>\n<li><a href=\"#%ED%9A%8C%EC%9B%90-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8\">회원 클래스 다이어그램</a></li>\n<li><a href=\"#%ED%9A%8C%EC%9B%90-%EA%B0%9D%EC%B2%B4-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8\">회원 객체 다이어그램</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EC%9B%90-%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B0%9C%EB%B0%9C\">📌 회원 도메인 개발</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EC%9B%90-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%8B%A4%ED%96%89%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8\">📌 회원 도메인 실행과 테스트</a></p>\n<ul>\n<li><a href=\"#main%EC%97%90%EC%84%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\">main에서 테스트</a></li>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1\">테스트 함수 작성</a></li>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\">문제점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%A3%BC%EB%AC%B8%EA%B3%BC-%ED%95%A0%EC%9D%B8-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%84%A4%EA%B3%84\">📌 주문과 할인 도메인 설계</a></p>\n<ul>\n<li><a href=\"#u%ED%98%91%EB%A0%A5-%EC%97%AD%ED%95%A0-%EC%B1%85%EC%9E%84u\"><u>협력, 역할, 책임</u></a></li>\n<li><a href=\"#%EC%97%AD%ED%95%A0--%EA%B5%AC%ED%98%84\">역할 + 구현</a></li>\n<li><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8\">클래스 다이어그램</a></li>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%8B%A4%EC%9D%B4%EC%96%B4%EA%B7%B8%EB%9E%A8\">객체 다이어그램</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%A3%BC%EB%AC%B8%EA%B3%BC-%ED%95%A0%EC%9D%B8-%EB%8F%84%EB%A9%94%EC%9D%B8-%EA%B0%9C%EB%B0%9C\">📌 주문과 할인 도메인 개발</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%A3%BC%EB%AC%B8%EA%B3%BC-%ED%95%A0%EC%9D%B8-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%8B%A4%ED%96%89%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8\">📌 주문과 할인 도메인 실행과 테스트</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%A0%95%EB%A6%AC\">🍄 정리</a></p>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-core-basic-002/"},"frontmatter":{"categories":"강의","title":"예제 만들기 - 스프링 핵심 원리 기본편 02 | 매일 1시간 👨🏻‍🏫 7일차","date":"October 07, 2022"}},"next":{"fields":{"slug":"/book-object-real-002/"}},"previous":{"fields":{"slug":"/spring-core-basic-003/"}}},{"node":{"id":"42417c94-02fb-5eb2-8ed2-501567bbb696","excerpt":"본 게시글은 스프링 핵심 원리 - 기본편 강의를 듣고 정리했습니다. ☘️ 객체 지향 설계와 스프링 스프링을 제대로 학습하려면 스프링이 제공하는 기능만 아는 게 아니라 객체지향의 원리와, 그 원리를 스프링이 어떻게 지원하는 지 함께 풀어가면서 이해해야 한다! 이 과정을 이해하고 나면 개발, 설계하는 시야가 달라지고 정말 재밌어진다. 단순히 스프링 기능을 배우는 건 어렵지 않고, 스프링이 제공하는 핵심 가치와 원리를 제대로 파악하려면 객체 지향을 이해해야 한다. 스프링의 본질을 이해했다는 것은 객체 지향 설계의 본질을 이해하는 것과 같다. 📌 자바 진영의 추운 겨울과 스프링의 탄생 당시 쓰던 EJB(Enterprise Java Bean)… 하지만 여기서 불편함을 느끼고 과  두 기술이 개발되었다. 스프링은 EJB 컨테이너, 하이버네이트는 EJB 엔티티빈 기술을 대체하게 되었다. 그리고 하이버네이트를 바탕으로 자바 ORM 표준으로 JPA가 나오게 되었다. EJB의 문제점을 지적하고, EJ…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%99%80-%EC%8A%A4%ED%94%84%EB%A7%81\">☘️ 객체 지향 설계와 스프링</a></p>\n<ul>\n<li>\n<p><a href=\"#-%EC%9E%90%EB%B0%94-%EC%A7%84%EC%98%81%EC%9D%98-%EC%B6%94%EC%9A%B4-%EA%B2%A8%EC%9A%B8%EA%B3%BC-%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%98-%ED%83%84%EC%83%9D\">📌 자바 진영의 추운 겨울과 스프링의 탄생</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%B4%EB%9E%80\">📌 스프링이란?</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%83%9D%ED%83%9C%EA%B3%84\">스프링 생태계</a></li>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EA%B0%9C%EB%85%90\">스프링 핵심 개념</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%A2%8B%EC%9D%80-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80-\">📌 좋은 객체 지향 프로그래밍이란? ✨</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\">객체 지향 프로그래밍</a></li>\n<li><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1\">다형성</a></li>\n<li><a href=\"#%EC%97%AD%ED%95%A0%EA%B3%BC-%EA%B5%AC%ED%98%84%EC%9D%84-%EB%B6%84%EB%A6%AC\">역할과 구현을 분리</a></li>\n<li><a href=\"#%EA%B0%9D%EC%B2%B4%EB%8A%94-%ED%98%91%EB%A0%A5%EC%9D%B4%EB%9D%BC%EB%8A%94-%EA%B4%80%EA%B3%84%EB%B6%80%ED%84%B0-%EC%83%9D%EA%B0%81\">객체는 협력이라는 관계부터 생각</a></li>\n<li><a href=\"#%EC%9E%90%EB%B0%94-%EC%96%B8%EC%96%B4%EC%9D%98-%EB%8B%A4%ED%98%95%EC%84%B1---code-classlanguage-text%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9code\">자바 언어의 다형성 - <code class=\"language-text\">오버라이딩</code>!</a></li>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81%EA%B3%BC-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5\">스프링과 객체 지향</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-solid-%EC%A2%8B%EC%9D%80-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%9D%98-5%EA%B0%80%EC%A7%80-%EC%9B%90%EC%B9%99\">📌 SOLID: 좋은 객체 지향 설계의 5가지 원칙</a></p>\n<ul>\n<li><a href=\"#1-code-classlanguage-textsrpcode-%EB%8B%A8%EC%9D%BC-%EC%B1%85%EC%9E%84-%EC%9B%90%EC%B9%99single-responsibility-principle\">1. <code class=\"language-text\">SRP</code>: 단일 책임 원칙(single responsibility principle)</a></li>\n<li><a href=\"#2-code-classlanguage-textocpcode-%EA%B0%9C%EB%B0%A9-%ED%8F%90%EC%87%84-%EC%9B%90%EC%B9%99-openclosed-principle\">2. ✨<code class=\"language-text\">OCP</code>: 개방-폐쇄 원칙 (Open/closed principle)</a></li>\n<li><a href=\"#3-code-classlanguage-textlspcode-%EB%A6%AC%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B9%98%ED%99%98-%EC%9B%90%EC%B9%99-liskov-substitution-principle\">3. <code class=\"language-text\">LSP</code>: 리스코프 치환 원칙 (Liskov substitution principle)</a></li>\n<li><a href=\"#4-code-classlanguage-textispcode-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EB%B6%84%EB%A6%AC-%EC%9B%90%EC%B9%99-interface-segregation-principle\">4. <code class=\"language-text\">ISP</code>: 인터페이스 분리 원칙 (Interface segregation principle)</a></li>\n<li><a href=\"#5-code-classlanguage-textdipcode-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%97%AD%EC%A0%84-%EC%9B%90%EC%B9%99-dependency-inversion-principle\">5. ✨<code class=\"language-text\">DIP</code>: 의존관계 역전 원칙 (Dependency inversion principle)</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%EC%84%A4%EA%B3%84%EC%99%80-%EC%8A%A4%ED%94%84%EB%A7%81\">📌 객체 지향 설계와 스프링</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%B4-%EC%97%86%EC%9C%BC%EB%A9%B4\">스프링이 없으면..?</a></li>\n<li><a href=\"#%EC%A0%95%EB%A6%AC-1\">정리</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-core-basic-001/"},"frontmatter":{"categories":"강의","title":"객체 지향 설계와 스프링 - 스프링 핵심 원리 기본편 01 | 매일 1시간 👨🏻‍🏫 6일차","date":"October 06, 2022"}},"next":{"fields":{"slug":"/book-object-real-001/"}},"previous":{"fields":{"slug":"/book-object-real-002/"}}},{"node":{"id":"d7241fe3-475b-5211-a825-a08a8260da38","excerpt":"본 게시글은 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 강의를 듣고 정리했습니다. ☘️ AOP Aspect Oriented Programming: 관점 지향 프로그래밍 📌 AOP가 필요한 상황 한 상황을 가정해보자. 메소드가 쭉 있는데.. 모든 메소드의 호출 시간을 측정하고 싶으면 어떻게 할까? 모든 메소드를 다 돌면서 타이머 누르고, 완료 시에 시간 재고.. 이걸 모두 추가해야한다! 만약 시간 측정 단위를 바꾸고 싶으면? 모든 메소드를 다시 돌면서 또 수정해야 한다. 문제: 공통 관심 사항(cross-cutting concern) vs 핵심 관심 사항(core concern) 시간을 측정하는 기능은 핵심 관심 사항이 아니다.  공통 관심 사항이다. 시간을 측정하는 로직과 핵심 비즈니스의 로직이 섞여서 유지보수가 어렵다. 시간을 측정하는 로직을 변경할 때 모든 로직을 찾아가면서 변경해야 한다. 그렇다고 시간을 측정하는 로직을 별도의 공통 로직으로 만들기…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-aop\">☘️ AOP</a></p>\n<ul>\n<li>\n<p><a href=\"#-aop%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%EC%83%81%ED%99%A9\">📌 AOP가 필요한 상황</a></p>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C-u%EA%B3%B5%ED%86%B5-%EA%B4%80%EC%8B%AC-%EC%82%AC%ED%95%ADcross-cutting-concern-vs-%ED%95%B5%EC%8B%AC-%EA%B4%80%EC%8B%AC-%EC%82%AC%ED%95%ADcore-concernu\">문제: <u><strong>공통 관심 사항(cross-cutting concern) vs 핵심 관심 사항(core concern)</strong></u></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-aop-%EC%A0%81%EC%9A%A9\">📌 AOP 적용</a></p>\n<ul>\n<li><a href=\"#%ED%95%B4%EA%B2%B0\">해결</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81%EC%9D%98-aop-%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D-u%ED%94%84%EB%A1%9D%EC%8B%9C-%EB%B0%A9%EC%8B%9D%EC%9D%98-aopu\">📌 스프링의 AOP 동작 방식: <u><strong>프록시 방식의 AOP</strong></u></a></p>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-hello-006/"},"frontmatter":{"categories":"강의","title":"AOP - 스프링 입문 | 매일 1시간 👨🏻‍🏫 5일차","date":"October 05, 2022"}},"next":{"fields":{"slug":"/spring-hello-005/"}},"previous":{"fields":{"slug":"/book-object-real-001/"}}},{"node":{"id":"e5194c41-9cb6-5d3c-9557-152553bc59a8","excerpt":"본 게시글은 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 강의를 듣고 정리했습니다. ☘️ 스프링 DB 접근 기술 JPA도 스프링만큼 오래된 기술이다. JPA를 더 편리하게 쓸 수 있도록 감싼 게 스프링 데이터 JPA이다. 📌 H2 데이터베이스 보통 실무에서는 DB는 mysql, oracle을 활용한다. H2 데이터베이스는 가볍고 교육용으로 좋다. 접속 처음 이용할 때는 데이터베이스 파일을 만들어야 한다. 에 파일 경로를 입력하자. JDBC URL에 경로 입력 후에 만약 test라는 이름으로 생성했다면 test.mv.db가 있는 지 확인하자. 이렇게 파일 생성 이후에는 위에처럼 파일을 직접 접근하는 것이 아닌 소켓을 통해 접근해서 여러 곳에서 파일을 접근해도 문제가 없도록 해야 한다.   h2 연결 오류 (카프카랑 같이 쓸 때 조심하세요…) 근데 여기서 계속 오류가 났다.  도움말을 눌러서 보면 CONNECTION_BROKEN_1 The error with…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%8A%A4%ED%94%84%EB%A7%81-db-%EC%A0%91%EA%B7%BC-%EA%B8%B0%EC%88%A0\">☘️ 스프링 DB 접근 기술</a></p>\n<ul>\n<li>\n<p><a href=\"#-h2-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4\">📌 H2 데이터베이스</a></p>\n<ul>\n<li><a href=\"#member-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%9D%EC%84%B1\">member 테이블 생성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%88%9C%EC%88%98-jdbc\">📌 순수 JDBC</a></p>\n<ul>\n<li><a href=\"#buildgradle\">build.gradle</a></li>\n<li><a href=\"#db-%EC%A0%95%EB%B3%B4-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\">db 정보 설정하기</a></li>\n<li><a href=\"#jdbcmemberrepository\">JdbcMemberRepository</a></li>\n<li><a href=\"#ocp\">OCP</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81-%ED%86%B5%ED%95%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8\">📌 스프링 통합 테스트</a></p>\n<ul>\n<li><a href=\"#code-classlanguage-textspringboottestcode\"><code class=\"language-text\">@SpringBootTest</code></a></li>\n<li><a href=\"#code-classlanguage-texttransactionalcode\"><code class=\"language-text\">@Transactional</code></a></li>\n<li><a href=\"#code-classlanguage-textunit-testcode-vs-code-classlanguage-textintegration-testcode\"><code class=\"language-text\">Unit Test</code> Vs. <code class=\"language-text\">Integration Test</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81-jdbctemplate\">📌 스프링 JdbcTemplate</a></p>\n</li>\n<li>\n<p><a href=\"#-jpa-java-persistence-api\">📌 JPA: Java Persistence API</a></p>\n<ul>\n<li><a href=\"#interface\">Interface</a></li>\n<li><a href=\"#orm\">ORM</a></li>\n<li><a href=\"#buildgradle-1\">build.gradle</a></li>\n<li><a href=\"#applicationproperties\">application.properties</a></li>\n<li><a href=\"#code-classlanguage-textentitycode\"><code class=\"language-text\">@Entity</code></a></li>\n<li><a href=\"#code-classlanguage-textjpamemberrepositorycode\"><code class=\"language-text\">JpaMemberRepository</code></a></li>\n<li><a href=\"#%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0\">저장하기</a></li>\n<li><a href=\"#pk%EA%B0%92%EC%9C%BC%EB%A1%9C-%EA%B0%9D%EC%B2%B4-%EC%B0%BE%EA%B8%B0\">pk값으로 객체 찾기</a></li>\n<li><a href=\"#%EA%B7%B8-%EC%99%B8-%EA%B0%92%EC%9C%BC%EB%A1%9C-%EA%B0%9D%EC%B2%B4-%EC%B0%BE%EA%B8%B0\">그 외 값으로 객체 찾기</a></li>\n<li><a href=\"#%EC%A0%84%EC%B2%B4-%EC%BD%94%EB%93%9C\">전체 코드</a></li>\n<li><a href=\"#%EF%B8%8F-code-classlanguage-texttransactionalcode\">⚠️ <code class=\"language-text\">@Transactional</code></a></li>\n<li><a href=\"#%EC%84%A4%EC%A0%95-%ED%8C%8C%EC%9D%BC\">설정 파일</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-jpa\">📌 스프링 데이터 JPA</a></p>\n<ul>\n<li><a href=\"#interface-1\">Interface</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-hello-005/"},"frontmatter":{"categories":"강의","title":"스프링 DB 접근 기술 - 스프링 입문 | 매일 1시간 👨🏻‍🏫 4일차, 5일차","date":"October 04, 2022"}},"next":{"fields":{"slug":"/spring-hello-004/"}},"previous":{"fields":{"slug":"/spring-hello-006/"}}},{"node":{"id":"a5a0379d-2a19-5ae9-bf12-22dfbe6f740a","excerpt":"본 게시글은 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 강의를 듣고 정리했습니다. ☘️ 회원 관리 예제 - 웹 MVC 개발 📌 회원 웹 기능 - 홈 화면 추가 홈 화면을 추가해보자. 컨트롤러를 통해 홈 화면 html을 리턴할 것이므로 에 home.html을 만들어주자. 회원 가입과 회원 목록은 ~~/members/new 와 ~~/members로 이동하도록 연결해놨다. 아래에서 컨트롤러를 연결해주자. 그리고 컨트롤러에서 home을 리턴해주자. 그럼 viewResolver가 templates에서 같은 이름의 파일을 찾고 필요하면 처리를 하고 내보내겠죠? 어라라? 근데 이미  폴더에 을 추가해놔서 welcome page로 home에선 해당 파일이 나오지 않았던가? 하지만 스프링은 우선 컨트롤러를 찾고, 없으면 static에서 정적 파일을 찾는다. 이 경우 컨트롤러가 있으므로 정적 파일을 찾지 않는다. 📌 회원 웹 기능 - 등록 회원가입 페이지와 컨트롤러 회원…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%ED%9A%8C%EC%9B%90-%EA%B4%80%EB%A6%AC-%EC%98%88%EC%A0%9C---%EC%9B%B9-mvc-%EA%B0%9C%EB%B0%9C\">☘️ 회원 관리 예제 - 웹 MVC 개발</a></p>\n<ul>\n<li>\n<p><a href=\"#-%ED%9A%8C%EC%9B%90-%EC%9B%B9-%EA%B8%B0%EB%8A%A5---%ED%99%88-%ED%99%94%EB%A9%B4-%EC%B6%94%EA%B0%80\">📌 회원 웹 기능 - 홈 화면 추가</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EC%9B%90-%EC%9B%B9-%EA%B8%B0%EB%8A%A5---%EB%93%B1%EB%A1%9D\">📌 회원 웹 기능 - 등록</a></p>\n<ul>\n<li><a href=\"#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%ED%8E%98%EC%9D%B4%EC%A7%80%EC%99%80-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC\">회원가입 페이지와 컨트롤러</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EC%9B%90-%EC%9B%B9-%EA%B8%B0%EB%8A%A5---%EC%A1%B0%ED%9A%8C\">📌 회원 웹 기능 - 조회</a></p>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-hello-004/"},"frontmatter":{"categories":"강의","title":"회원 관리 예제 / 웹 MVC 개발 - 스프링 입문 | 매일 1시간 👨🏻‍🏫 4일차","date":"October 04, 2022"}},"next":{"fields":{"slug":"/spring-hello-003/"}},"previous":{"fields":{"slug":"/spring-hello-005/"}}},{"node":{"id":"88cd5888-280c-5f11-b541-1ded4fa445bf","excerpt":"본 게시글은 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 강의를 듣고 정리했습니다. ☘️ 스프링 빈과 의존 관계 이때까지 잘 만든 걸 화면이랑 붙여보자. 그러려면 Controller와 View Template이 필요하다. 그럼 Controller가 Service를 통해 조회, 가입 등등을 한다. 그렇다면 MemberController가 MemberService를 의존하게 된다. 이걸 스프링을 통해 스프링스럽게 해보자. 📌 컴포넌트 스캔과 자동 의존관계 설정  어노테이션을 통해 스프링이 시작될 때 스프링 컨테이너 통에 이 MemberController객체가 생성되어서 넣어진다. Spring Bean이 관리된다.  역시 하나 생성해놓고 여러 컨트롤러에서 공유해서 사용해도 된다. 따라서 스프링 컨테이너에 등록해두는 것이 더 좋다. (+ 부가적인 효과.. coming soon..) 생성자에 를 적어준다면 해당 빈이 생성될 때 스프링이 컨테이너에 있는 필요한 인자…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88%EA%B3%BC-%EC%9D%98%EC%A1%B4-%EA%B4%80%EA%B3%84\">☘️ 스프링 빈과 의존 관계</a></p>\n<ul>\n<li>\n<p><a href=\"#-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%8A%A4%EC%BA%94%EA%B3%BC-%EC%9E%90%EB%8F%99-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84-%EC%84%A4%EC%A0%95\">📌 컴포넌트 스캔과 자동 의존관계 설정</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88%EC%9D%84-%EB%93%B1%EB%A1%9D%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">스프링 빈을 등록하는 방법</a></li>\n<li><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%8A%A4%EC%BA%94-%EC%9C%84%EC%B9%98\">컴포넌트 스캔 위치</a></li>\n<li><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%8A%94-%EC%8B%B1%EA%B8%80%ED%86%A4\">컴포넌트는 싱글톤</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%9E%90%EB%B0%94-%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%A7%81%EC%A0%91-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B9%88-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0\">📌 자바 코드로 직접 스프링 빈 등록하기</a></p>\n<ul>\n<li><a href=\"#configuration-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0\">Configuration 클래스 만들기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EC%B0%B8%EA%B3%A0\">📌 참고</a></p>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-hello-003/"},"frontmatter":{"categories":"강의","title":"스프링 빈과 의존관계 - 스프링 입문 | 매일 1시간 👨🏻‍🏫 3일차","date":"October 04, 2022"}},"next":{"fields":{"slug":"/spring-hello-002/"}},"previous":{"fields":{"slug":"/spring-hello-004/"}}},{"node":{"id":"a41a116b-87a5-5fab-8b89-aecc310a4dad","excerpt":"본 게시글은 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 강의를 듣고 정리했습니다. ☘️ 회원 관리 예제 - 백엔드 개발 📌 비즈니스 요구사항 정리 정말 간단하게! 데이터: 회원ID, 이름 기능: 회원 등록, 조회 아직 데이터 저장소가 선정되지 않음(가상의 시나리오) 일반적인 웹 애플리케이션 계층 구조  컨트롤러: 웹 MVC의 컨트롤러 역할 서비스: 핵심 비즈니스 로직 구현 리포지토리: 데이터베이스에 접근, 도메인 객체를 DB에 저장하고 관리 도메인: 비즈니스 도메인 객체, 예) 회원, 주문, 쿠폰 등등 주로 데이터베이스에 저장하고 관리됨 실습 클래스 의존관계  아직 데이터 저장소가 선장되지 않았으므로 저장소를 우선 인터페이스로 구현 클래스를 변경할 수 있도록 설계한다. 일단은 구현체로 메모리 기반의 데이터 저장소를 먼저 구현하고, 나중에 구현체를 바꿔끼운다. 📌 회원 도메인과 리포지토리 작성과 테스트 회원 리포지토리 인터페이스 요즘은 null을 그대로 …","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%ED%9A%8C%EC%9B%90-%EA%B4%80%EB%A6%AC-%EC%98%88%EC%A0%9C---%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C\">☘️ 회원 관리 예제 - 백엔드 개발</a></p>\n<ul>\n<li>\n<p><a href=\"#-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EC%9A%94%EA%B5%AC%EC%82%AC%ED%95%AD-%EC%A0%95%EB%A6%AC\">📌 비즈니스 요구사항 정리</a></p>\n<ul>\n<li><a href=\"#%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%EC%9B%B9-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0\">일반적인 웹 애플리케이션 계층 구조</a></li>\n<li><a href=\"#%EC%8B%A4%EC%8A%B5-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84\">실습 클래스 의존관계</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EC%9B%90-%EB%8F%84%EB%A9%94%EC%9D%B8%EA%B3%BC-%EB%A6%AC%ED%8F%AC%EC%A7%80%ED%86%A0%EB%A6%AC-%EC%9E%91%EC%84%B1%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8\">📌 회원 도메인과 리포지토리 작성과 테스트</a></p>\n<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BC%80%EC%9D%B4%EC%8A%A4-%EC%9E%91%EC%84%B1\">테스트 케이스 작성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%ED%9A%8C%EC%9B%90-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B0%9C%EB%B0%9C%EA%B3%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8\">📌 회원 서비스 개발과 테스트</a></p>\n<ul>\n<li><a href=\"#%ED%9A%8C%EC%9B%90-%EC%84%9C%EB%B9%84%EC%8A%A4\">회원 서비스</a></li>\n<li><a href=\"#%ED%9A%8C%EC%9B%90-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\">회원 서비스 테스트</a></li>\n<li><a href=\"#%EC%98%88%EC%99%B8-%ED%99%95%EC%9D%B8\">예외 확인</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-hello-002/"},"frontmatter":{"categories":"강의","title":"회원 관리 예제 / 백엔드 개발 - 스프링 입문 | 매일 1시간 👨🏻‍🏫 3일차","date":"October 03, 2022"}},"next":{"fields":{"slug":"/spring-hello-001/"}},"previous":{"fields":{"slug":"/spring-hello-003/"}}},{"node":{"id":"0caf44a9-b549-584b-a296-9b8ccd1f06d7","excerpt":"본 게시글은 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 강의를 듣고 정리했습니다. ☘️ 스프링 웹 개발 기초 웹을 개발한다는 건 크게 세 가지 경우가 있다. 정적 컨텐츠: 서버에서 뭐 하는 거 없이 그냥 파일 그대로 내보낸다. MVC와 템플릿 엔진: JSP같은 소위 템플릿 엔진. html을 동적으로 바꿔서 내보냄. 요즘은 이 패턴 API json 데이터 포맷으로 클라(안드, ios 등등)한테 데이터 넘겨주기. 서버끼리 통신 📌 정적 컨텐츠 스프링 부트 정적 컨텐츠 기능 스프링 부트는 정적 컨텐츠 기능을 기본적으로 제공한다. 에서 static content를 찾는다. 을 하면 기본적으로 정적 파일을 찾아서 그대로 반환해준다.  큰 개념을 설명하자면 대략 이렇다. 자세한 건 다음 강의에서.. 우선 요청이 들어오면, 내장 톰캣 서버가 요청을 받고 넘긴다. 그럼 스프링은 해당 이름의 컨트롤러를 먼저 찾는다. -> 컨트롤러 우선순위가 더 높다는 뜻 컨트롤러가 없…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EF%B8%8F-%EC%8A%A4%ED%94%84%EB%A7%81-%EC%9B%B9-%EA%B0%9C%EB%B0%9C-%EA%B8%B0%EC%B4%88\">☘️ 스프링 웹 개발 기초</a></p>\n<ul>\n<li>\n<p><a href=\"#-%EC%A0%95%EC%A0%81-%EC%BB%A8%ED%85%90%EC%B8%A0\">📌 정적 컨텐츠</a></p>\n<ul>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8-%EC%A0%95%EC%A0%81-%EC%BB%A8%ED%85%90%EC%B8%A0-%EA%B8%B0%EB%8A%A5\">스프링 부트 정적 컨텐츠 기능</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-mvc%EC%99%80-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%97%94%EC%A7%84\">📌 MVC와 템플릿 엔진</a></p>\n<ul>\n<li><a href=\"#%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D\">동작 방식</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-api\">📌 API</a></p>\n<ul>\n<li><a href=\"#%EC%98%88%EC%8B%9C1---%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%9D%91%EB%8B%B5\">예시1 - 문자열 응답</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C2---json-%EC%9D%91%EB%8B%B5\">예시2 - JSON 응답</a></li>\n<li><a href=\"#%EB%8F%99%EC%9E%91-%EB%B0%A9%EC%8B%9D-1\">동작 방식</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/spring-hello-001/"},"frontmatter":{"categories":"강의","title":"스프링 웹 개발 기초 - 스프링 입문 | 매일 1시간 👨🏻‍🏫 2일차","date":"October 03, 2022"}},"next":{"fields":{"slug":"/python-001/"}},"previous":{"fields":{"slug":"/spring-hello-002/"}}}]}},"staticQueryHashes":["1956554647","2938748437","3454833782"]}