{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/운영체제","result":{"pageContext":{"currentCategory":"운영체제","categories":["All","책","강의","Python","운영체제","네트워크","TIL","Java"],"edges":[{"node":{"id":"8f083de2-22b5-57e9-8250-b2c5b65d125e","excerpt":"📓 데드락(deadlock) | 교착 상태 시스템 내의 임계 구역(critical section)이 존재할 경우, 프로세스 간 상호 배제(mutual exclusion)를 보장해야 합니다. 이를 보장하기 위해 잠금(lock)을 사용하다보면 작업이 더 이상 진행되지 않는 교착상태(deadlock)에 빠지는 경우가 있습니다. 이 때 이 데드락은 무엇이고, 왜 발생하고, 어떻게 해결할까요? 📌 데드락이란? 두 개 이상의 프로세스가 다른 프로세스의 작업이 끝나기만 기다리며 작업을 더 이상 진행하지 못하는 상태입니다. 이 때, ‘더 이상 진행하지 못하는 상태’라는 이유로 과 헷갈리기 쉬우므로 주의해야합니다 starvation 작업을 해야 하는 프로세스가 프로세서(CPU)를 할당받지 못해 Ready 상태에서 더 이상 진행하지 못하는 상태입니다. 스케줄링에 대해 공부하다가 나오는 개념입니다. starvation은 운영체제가 잘못된 정책을 사용하여 특정 프로세스의 작업이 지연되는 문제고, dea…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#-%EB%8D%B0%EB%93%9C%EB%9D%BDdeadlock--%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C\">📓 데드락(deadlock) | 교착 상태</a></p>\n<ul>\n<li>\n<p><a href=\"#-%EB%8D%B0%EB%93%9C%EB%9D%BD%EC%9D%B4%EB%9E%80\">📌 데드락이란?</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%8D%B0%EB%93%9C%EB%9D%BD%EC%9D%B4-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">📌 데드락이 발생하는 경우</a></p>\n<ul>\n<li><a href=\"#1-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%9E%90%EC%9B%90%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\">1. 시스템 자원을 사용하는 경우</a></li>\n<li><a href=\"#2-%EA%B3%B5%EC%9C%A0-%EB%B3%80%EC%88%98\">2. 공유 변수</a></li>\n<li><a href=\"#3-%EC%9D%91%EC%9A%A9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8\">3. 응용 프로그램</a></li>\n<li><a href=\"#%EC%8B%9D%EC%82%AC%ED%95%98%EB%8A%94-%EC%B2%A0%ED%95%99%EC%9E%90-%EB%AC%B8%EC%A0%9C-dining-philosophers\">식사하는 철학자 문제 (Dining Philosophers)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#--%EB%8D%B0%EB%93%9C%EB%9D%BD-%EB%B0%9C%EC%83%9D-u%ED%95%84%EC%9A%94u%EC%A1%B0%EA%B1%B4-4%EA%B0%80%EC%A7%80\">📌  데드락 발생 <u><strong>필요</strong></u>조건 4가지</a></p>\n<ul>\n<li><a href=\"#1-%EC%83%81%ED%98%B8-%EB%B0%B0%EC%A0%9C-code-classlanguage-textmutual-exclusioncode\">1. 상호 배제 <code class=\"language-text\">Mutual exclusion</code></a></li>\n<li><a href=\"#2-%EB%B9%84%EC%84%A0%EC%A0%90-code-classlanguage-textno-preemptioncode\">2. 비선점 <code class=\"language-text\">No preemption</code></a></li>\n<li><a href=\"#3-%EC%A0%90%EC%9C%A0%EC%99%80-%EB%8C%80%EA%B8%B0-code-classlanguage-texthold-and-waitcode\">3. 점유와 대기 <code class=\"language-text\">Hold-and-wait</code></a></li>\n<li><a href=\"#4-%EC%9B%90%ED%98%95-%EB%8C%80%EA%B8%B0-code-classlanguage-textcircular-waitcode\">4. 원형 대기 <code class=\"language-text\">Circular wait</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EB%8D%B0%EB%93%9C%EB%9D%BD-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\">📓 데드락 해결 방법</a></p>\n<ul>\n<li>\n<p><a href=\"#-%EC%98%88%EB%B0%A9%ED%95%98%EA%B8%B0-prevention\">📌 예방하기 (Prevention)</a></p>\n<ul>\n<li><a href=\"#1-%EC%83%81%ED%98%B8-%EB%B0%B0%EC%A0%9C-%EC%98%88%EB%B0%A9\">1. 상호 배제 예방</a></li>\n<li><a href=\"#2-%EB%B9%84%EC%84%A0%EC%A0%90-%EC%98%88%EB%B0%A9\">2. 비선점 예방</a></li>\n<li><a href=\"#3-%EC%A0%90%EC%9C%A0%EC%99%80-%EB%8C%80%EA%B8%B0-%EC%98%88%EB%B0%A9\">3. 점유와 대기 예방</a></li>\n<li><a href=\"#4-%EC%9B%90%ED%98%95-%EB%8C%80%EA%B8%B0-%EC%98%88%EB%B0%A9\">4. 원형 대기 예방</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#--%ED%9A%8C%ED%94%BC%ED%95%98%EA%B8%B0-avoidance\">📌  회피하기 (Avoidance)</a></p>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\">문제점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-%EA%B2%80%EC%B6%9C-%EB%B0%8F-%ED%9A%8C%EB%B3%B5%ED%95%98%EA%B8%B0\">📌 검출 및 회복하기</a></p>\n<ul>\n<li><a href=\"#%EA%B2%80%EC%B6%9C\">검출</a></li>\n<li><a href=\"#%ED%9A%8C%EB%B3%B5\">회복</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/os-003-deadlock/"},"frontmatter":{"categories":"운영체제","title":"데드락(deadlock) | 교착 상태","date":"September 27, 2022"}},"next":{"fields":{"slug":"/network-001-handshake/"}},"previous":{"fields":{"slug":"/python-001/"}}},{"node":{"id":"078fdb1d-c8cf-5589-bdb7-91e943be0bb2","excerpt":"프로세스와 스레드 프로세스의 개요 프로세스 제어 블록과 문맥 교환 프로세스의 연산 스레드 [심화학습] 동적 할당 영역과 시스템 호출 PCB: Process Control Block 📌 프로세스 제어 블록 프로세스의 개요에서 프로세스를 실행하는 데 메모리만 필요한 것이 아니고, 관리하기 위한 자료 구조로 PCB가 필요하다고 했죠? PCB에 대해 더 알아봅시다. 프로세스를  Task라고도 하는 것처럼, PCB 역시 TCB라고도 부릅니다. ☘️ PCB 구성 포인터 프로세스의 개요에서 프로세스의 상태에 따라 큐로 운영된다고 했습니다. 이 때 queue에서 PCB를 연결할 때 포인터를 사용합니다. 프로세스 상태 Run, Ready, Waiting 등의 상태 프로세스 ID 프로세스를 구별하기 위한 구분자 프로그램 우선순위 CPU Scheduling이 일어나서 스케줄러가 준비 상태에 있는 프로세스 중 실행 상태로 옮겨야 할 프로세스를 어떻게 선택할까요? 프로세스 우선순위를 기준으로 삼아서, 높은…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#pcb-process-control-block\">PCB: Process Control Block</a></p>\n<ul>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4-%EB%B8%94%EB%A1%9D\">📌 프로세스 제어 블록</a></p>\n<ul>\n<li><a href=\"#%EF%B8%8F-pcb-%EA%B5%AC%EC%84%B1\">☘️ PCB 구성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-context-switching\">📌 Context Switching</a></p>\n<ul>\n<li><a href=\"#%EF%B8%8F-context-switching%EB%AC%B8%EB%A7%A5-%EA%B5%90%ED%99%98%EC%9D%B4%EB%9E%80\">☘️ Context Switching(문맥 교환)이란</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%96%B8%EC%A0%9C-%EC%9D%BC%EC%96%B4%EB%82%A0%EA%B9%8C\">☘️ 언제 일어날까?</a></li>\n<li><a href=\"#%EF%B8%8F-%EC%A0%88%EC%B0%A8\">☘️ 절차</a></li>\n<li><a href=\"#%EF%B8%8F--%EB%8B%A8%EC%A0%90\">☘️  단점</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/os-002-pcb/"},"frontmatter":{"categories":"운영체제","title":"프로세스 제어 블록과 문맥 교환(PCB & Context Switching) | 프로세스와 스레드","date":"September 12, 2022"}},"next":{"fields":{"slug":"/os-001-process/"}},"previous":{"fields":{"slug":"/til-003/"}}},{"node":{"id":"b621840d-1d30-5bb3-901f-5542d02679d7","excerpt":"프로세스와 스레드 프로세스의 개요 프로세스 제어 블록과 문맥 교환 프로세스의 연산 스레드 [심화학습] 동적 할당 영역과 시스템 호출 프로세스의 개요 📌 프로그램과 프로세스 운영체제에서 는 하나의 작업단위입니다. (그래서 프로세스를 라고도 부릅니다.) 사용자가 마우스를 더블클릭하여 을 실행하면 그 프로그램이 프로세스가 되는 겁니다. 그럼 정확히 둘의 차이는 뭘까요? 정적인 상태 vs. 동적인 상태 프로그램은 저장장치에 보관되어 있습니다. 그리고 프로그램이 실행된다는 건 프로그램 코드가 에 올라와서 작업이 진행되는 것입니다. 그리고 이렇게 메모리에 올라온 것이 프로세스라고 할 수 있습니다. 프로그램은 작업 절차를 쭉 적어놓은 것이고, 프로세스는 그 작성된 작업 절차를 실제로 실행하는 것입니다. 예를 들자면, 요리할 때 레시피를 보고 레시피를 순서대로 실행하면서 요리를 하는 것과 같습니다. 이 때 레시피가 프로그램이고, 요리를 하는 것은 프로세스가 명령을 실행하는 것이라고 할 수 있습니…","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EA%B0%9C%EC%9A%94\">프로세스의 개요</a></p>\n<ul>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EA%B3%BC-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\">📌 프로그램과 프로세스</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%97%90%EC%84%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EB%A1%9C\">📌 프로그램에서 프로세스로</a></p>\n</li>\n<li>\n<p><a href=\"#-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C\">📌 프로세스의 상태</a></p>\n<ul>\n<li><a href=\"#-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EC%83%81%ED%83%9C-%EC%A2%85%EB%A5%98\">🏃 프로세스의 상태 종류</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/os-001-process/"},"frontmatter":{"categories":"운영체제","title":"프로세스의 개요 | 프로세스와 스레드","date":"September 11, 2022"}},"next":{"fields":{"slug":"/til-002/"}},"previous":{"fields":{"slug":"/os-002-pcb/"}}}]}},"staticQueryHashes":["1956554647","2938748437","3454833782"]}